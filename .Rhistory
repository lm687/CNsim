View(comparison_randomintercepts_models_nonexo)
.x <- do.call('rbind.data.frame', lapply(enough_samples, function(ct){
x_RE_fullRE_DMSL <- try(python_like_select_name(model_fullRE_DMSL_list[[ct]]$par.random, "u_large"))
x_RE_diagRE_DMSL <- try(python_like_select_name(model_diagRE_DMSL_list[[ct]]$par.random, "u_large"))
x_RE_fullRE_M <- try(python_like_select_name(model_fullRE_M_list[[ct]]$par.random, "u_large"))
if( (length(x_RE_fullRE_DMSL) != length(x_RE_diagRE_DMSL)) | (length(x_RE_fullRE_DMSL) != length(x_RE_fullRE_M)) ){
## if we don't have results for any, remove from the analysis
list_RE <- list(x_RE_fullRE_DMSL, x_RE_diagRE_DMSL, x_RE_fullRE_M)
typeofs_of_RE <- sapply(list_RE, typeof)
if( all(typeofs_of_RE == "character")  ){
return(NULL)
}else{
## if we do have results for some, replace the error message by an NA string
## replace using the length of the first double entry
if(typeofs_of_RE[1] == "character"){
x_RE_fullRE_DMSL <- rep(NA, length(list_RE[[which(typeofs_of_RE == "double")[1]]]))
}
if(typeofs_of_RE[2] == "character"){
x_RE_diagRE_DMSL <- rep(NA, length(list_RE[[which(typeofs_of_RE == "double")[1]]]))
}
if(typeofs_of_RE[3] == "character"){
x_RE_fullRE_M <- rep(NA, length(list_RE[[which(typeofs_of_RE == "double")[1]]]))
}
if( (length(x_RE_fullRE_DMSL) != length(x_RE_diagRE_DMSL)) | (length(x_RE_fullRE_DMSL) != length(x_RE_fullRE_M)) ){
warning(paste0(ct, ': the number of log-ratios is not consistent'))
return(NULL)
}
}
}
## put the coefficients in matrix form
## get the number of log-ratios, d-1
dmin1 <- (names(table(sapply(list(model_fullRE_DMSL_list, model_diagRE_DMSL_list, model_fullRE_M_list), function(i)    as.numeric(try(length(python_like_select_name(i[[ct]]$par.fixed, 'beta'))/2))))))
if(length(dmin1) == 1){
## there should only be one, shared, d-1
dmin1 <- as.numeric(dmin1)
}else{
stop(paste0('Models do not agree on number of log-ratios. CT: ', ct))
}
x_RE_fullRE_DMSL <- matrix(x_RE_fullRE_DMSL, ncol=dmin1, byrow=F)
x_RE_diagRE_DMSL <- matrix(x_RE_diagRE_DMSL, ncol=dmin1, byrow=F)
x_RE_fullRE_M <- matrix(x_RE_fullRE_M, ncol=dmin1, byrow=F)
bad_fullRE_DMSL=F
bad_diagRE_DMSL=F
bad_fullRE_M=F
## if something hasn't converged, set all the random coefficients to NA
if((typeof(model_fullRE_DMSL_list[[ct]]) == "character") ){
bad_fullRE_DMSL=T
}else{
if(try(!(model_fullRE_DMSL_list[[ct]]$pdHess))){
bad_fullRE_DMSL=T
}
}
if(bad_fullRE_DMSL){
x_RE_fullRE_DMSL <- matrix(NA, nrow = nrow(x_RE_fullRE_DMSL), ncol=ncol(x_RE_fullRE_DMSL))
}
#----
if((typeof(model_diagRE_DMSL_list[[ct]]) == "character") ){
bad_diagRE_DMSL=T
}else{
if(try(!(model_diagRE_DMSL_list[[ct]]$pdHess))){
bad_diagRE_DMSL=T
}
}
if(bad_diagRE_DMSL){
x_RE_diagRE_DMSL <- matrix(NA, nrow = nrow(x_RE_diagRE_DMSL), ncol=ncol(x_RE_diagRE_DMSL))
}
#-----
if((typeof(model_fullRE_M_list[[ct]]) == "character") ){
bad_fullRE_M=T
}else{
if(try(!(model_fullRE_M_list[[ct]]$pdHess))){
bad_fullRE_M=T
}
}
if(bad_fullRE_M){
x_RE_fullRE_M <- matrix(NA, nrow = nrow(x_RE_fullRE_M), ncol=ncol(x_RE_fullRE_M))
}
## for each patient using the x_RE_fullRE_DMSL intercepts, get the distance to the intercepts of the other two models
dist_DMSLs <- sapply(1:nrow(x_RE_fullRE_DMSL), function(i){
if(all(is.na(x_RE_fullRE_DMSL[i,])) | all(is.na(x_RE_diagRE_DMSL[i,]))){
NA
}else{
dist(rbind(x_RE_fullRE_DMSL[i,], x_RE_diagRE_DMSL[i,]))
}
})
dist_fullREs <- sapply(1:nrow(x_RE_fullRE_DMSL), function(i){
if(all(is.na(x_RE_fullRE_DMSL[i,])) | all(is.na(x_RE_fullRE_M[i,]))){
NA
}else{
dist(rbind(x_RE_fullRE_DMSL[i,], x_RE_fullRE_M[i,]))
}
})
cbind.data.frame(melt(list(dist_DMSLs=dist_DMSLs, dist_fullREs=dist_fullREs)),
ct=ct)
}
))
.x$ct2=renaming_pcawg[,2][match(.x$ct, renaming_pcawg[,1])]
View(.x)
.x$value
comparison_randomintercepts_models <- function(model_fullRE_DMSL_list, model_diagRE_DMSL_list, model_fullRE_M_list ){
.x <- do.call('rbind.data.frame', lapply(enough_samples, function(ct){
x_RE_fullRE_DMSL <- try(python_like_select_name(model_fullRE_DMSL_list[[ct]]$par.random, "u_large"))
x_RE_diagRE_DMSL <- try(python_like_select_name(model_diagRE_DMSL_list[[ct]]$par.random, "u_large"))
x_RE_fullRE_M <- try(python_like_select_name(model_fullRE_M_list[[ct]]$par.random, "u_large"))
if( (length(x_RE_fullRE_DMSL) != length(x_RE_diagRE_DMSL)) | (length(x_RE_fullRE_DMSL) != length(x_RE_fullRE_M)) ){
## if we don't have results for any, remove from the analysis
list_RE <- list(x_RE_fullRE_DMSL, x_RE_diagRE_DMSL, x_RE_fullRE_M)
typeofs_of_RE <- sapply(list_RE, typeof)
if( all(typeofs_of_RE == "character")  ){
return(NULL)
}else{
## if we do have results for some, replace the error message by an NA string
## replace using the length of the first double entry
if(typeofs_of_RE[1] == "character"){
x_RE_fullRE_DMSL <- rep(NA, length(list_RE[[which(typeofs_of_RE == "double")[1]]]))
}
if(typeofs_of_RE[2] == "character"){
x_RE_diagRE_DMSL <- rep(NA, length(list_RE[[which(typeofs_of_RE == "double")[1]]]))
}
if(typeofs_of_RE[3] == "character"){
x_RE_fullRE_M <- rep(NA, length(list_RE[[which(typeofs_of_RE == "double")[1]]]))
}
if( (length(x_RE_fullRE_DMSL) != length(x_RE_diagRE_DMSL)) | (length(x_RE_fullRE_DMSL) != length(x_RE_fullRE_M)) ){
warning(paste0(ct, ': the number of log-ratios is not consistent'))
return(NULL)
}
}
}
## put the coefficients in matrix form
## get the number of log-ratios, d-1
dmin1 <- (names(table(sapply(list(model_fullRE_DMSL_list, model_diagRE_DMSL_list, model_fullRE_M_list), function(i)    as.numeric(try(length(python_like_select_name(i[[ct]]$par.fixed, 'beta'))/2))))))
if(length(dmin1) == 1){
## there should only be one, shared, d-1
dmin1 <- as.numeric(dmin1)
}else{
stop(paste0('Models do not agree on number of log-ratios. CT: ', ct))
}
x_RE_fullRE_DMSL <- matrix(x_RE_fullRE_DMSL, ncol=dmin1, byrow=F)
x_RE_diagRE_DMSL <- matrix(x_RE_diagRE_DMSL, ncol=dmin1, byrow=F)
x_RE_fullRE_M <- matrix(x_RE_fullRE_M, ncol=dmin1, byrow=F)
bad_fullRE_DMSL=F
bad_diagRE_DMSL=F
bad_fullRE_M=F
## if something hasn't converged, set all the random coefficients to NA
if((typeof(model_fullRE_DMSL_list[[ct]]) == "character") ){
bad_fullRE_DMSL=T
}else{
if(try(!(model_fullRE_DMSL_list[[ct]]$pdHess))){
bad_fullRE_DMSL=T
}
}
if(bad_fullRE_DMSL){
x_RE_fullRE_DMSL <- matrix(NA, nrow = nrow(x_RE_fullRE_DMSL), ncol=ncol(x_RE_fullRE_DMSL))
}
#----
if((typeof(model_diagRE_DMSL_list[[ct]]) == "character") ){
bad_diagRE_DMSL=T
}else{
if(try(!(model_diagRE_DMSL_list[[ct]]$pdHess))){
bad_diagRE_DMSL=T
}
}
if(bad_diagRE_DMSL){
x_RE_diagRE_DMSL <- matrix(NA, nrow = nrow(x_RE_diagRE_DMSL), ncol=ncol(x_RE_diagRE_DMSL))
}
#-----
if((typeof(model_fullRE_M_list[[ct]]) == "character") ){
bad_fullRE_M=T
}else{
if(try(!(model_fullRE_M_list[[ct]]$pdHess))){
bad_fullRE_M=T
}
}
if(bad_fullRE_M){
x_RE_fullRE_M <- matrix(NA, nrow = nrow(x_RE_fullRE_M), ncol=ncol(x_RE_fullRE_M))
}
## for each patient using the x_RE_fullRE_DMSL intercepts, get the distance to the intercepts of the other two models
dist_DMSLs <- sapply(1:nrow(x_RE_fullRE_DMSL), function(i){
if(all(is.na(x_RE_fullRE_DMSL[i,])) | all(is.na(x_RE_diagRE_DMSL[i,]))){
NA
}else{
dist(rbind(x_RE_fullRE_DMSL[i,], x_RE_diagRE_DMSL[i,]))
}
})
dist_fullREs <- sapply(1:nrow(x_RE_fullRE_DMSL), function(i){
if(all(is.na(x_RE_fullRE_DMSL[i,])) | all(is.na(x_RE_fullRE_M[i,]))){
NA
}else{
dist(rbind(x_RE_fullRE_DMSL[i,], x_RE_fullRE_M[i,]))
}
})
cbind.data.frame(melt(list(dist_DMSLs=dist_DMSLs, dist_fullREs=dist_fullREs)),
ct=ct)
}
))
# ## if something hasn't converged, remove the value
# bad_ct_fullRE_DMSL <- c(enough_samples[sapply(enough_samples,
#                                               function(ct) (typeof(model_fullRE_DMSL_list[[ct]])) == 'character')],
#                         enough_samples[sapply(enough_samples,
#                                               function(ct)  try(model_fullRE_DMSL_list[[ct]]$pdHess)) != "TRUE"])
# bad_ct_diagRE_DMSL <- c(enough_samples[sapply(enough_samples,
#                                               function(ct) (typeof(model_diagRE_DMSL_list[[ct]])) == 'character')],
#                         enough_samples[sapply(enough_samples, function(ct)  try(model_diagRE_DMSL_list[[ct]]$pdHess)) != "TRUE"])
# bad_ct_fullRE_M <- c(enough_samples[sapply(enough_samples,
#                                            function(ct) (typeof(model_fullRE_M_list[[ct]])) == 'character')],
#                      enough_samples[sapply(enough_samples, function(ct)  try(model_fullRE_M_list[[ct]]$pdHess)) != "TRUE"])
#
# .x$fullRE_DMSL[(.x$ct %in% bad_ct_fullRE_DMSL)] = NA
# .x$diagRE_DMSL[(.x$ct %in% bad_ct_diagRE_DMSL)] = NA
# .x$fullRE_M[(.x$ct %in% bad_ct_fullRE_M)] = NA
.x$ct2=renaming_pcawg[,2][match(.x$ct, renaming_pcawg[,1])]
return(.x)
}
comparison_randomintercepts_models_nonexo <- comparison_randomintercepts_models(model_fullRE_DMSL_list = fullRE_DMSL_nonexo,
model_diagRE_DMSL_list = diagRE_DMSL_nonexo,
model_fullRE_M_list = fullRE_M_nonexo)
comparison_randomintercepts_models_nonexo$value
comparison_randomintercepts_models_nonexo <- comparison_randomintercepts_models(model_fullRE_DMSL_list = fullRE_DMSL_nonexo,
model_diagRE_DMSL_list = diagRE_DMSL_nonexo,
model_fullRE_M_list = fullRE_M_nonexo)
ggplot(droplevels(comparison_randomintercepts_models_nonexo),
aes(x=as.character(ct2),
y=value))+
theme_bw()+theme(legend.position = "bottom")
head(comparison_randomintercepts_models_nonexo)
table(comparison_randomintercepts_models_nonexo$value)
ggplot(droplevels(comparison_randomintercepts_models_nonexo),
aes(x=as.character(ct2),
y=value))+
theme_bw()+theme(legend.position = "bottom")+geom_point()
comparison_randomintercepts_models_nonexo
ggplot((comparison_randomintercepts_models_nonexo),
aes(x=factor(ct2),
y=value))+
theme_bw()+theme(legend.position = "bottom")+geom_point()
ggplot(droplevels(comparison_randomintercepts_models_nonexo),
aes(x=factor(ct2),
y=value))+
theme_bw()+theme(legend.position = "bottom")+geom_point()
ggplot(droplevels(comparison_randomintercepts_models_nonexo),
aes(x=factor(ct2),
y=value))+
theme(legend.position = "bottom")+geom_point()
ggplot(droplevels(comparison_randomintercepts_models_nonexo),
aes(x=(ct2),
y=value))+
theme_bw()+theme(legend.position = "bottom")+geom_point()
ggplot(droplevels(comparison_randomintercepts_models_nonexo),
aes(x=as.character(ct2),
y=value))+
theme_bw()+theme(legend.position = "bottom")+geom_point()
comparison_randomintercepts_models_nonexo$ct2
ggplot(drop(comparison_randomintercepts_models_nonexo),
aes(x=as.character(ct2),
y=value))+
theme_bw()+theme(legend.position = "bottom")+geom_point()
ggplot(data.frame(comparison_randomintercepts_models_nonexo),
aes(x=as.character(ct2),
y=value))+
theme_bw()+theme(legend.position = "bottom")+geom_point()
ggplot(droplevels(data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=as.character(ct2),
y=value))+
theme_bw()+theme(legend.position = "bottom")+geom_point()
ggplot(droplevels(data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=as.character(ct2),
y=value))+geom_point()
ggplot(droplevels(data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
ggplot(droplevels(as.data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
ggplot((as.data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
typeof(comparison_randomintercepts_models_nonexo)
comparison_randomintercepts_models_nonexo
comparison_randomintercepts_models_nonexo <- data.frame(comparison_randomintercepts_models_nonexo)
typeof(comparison_randomintercepts_models_nonexo)
apply(comparison_randomintercepts_models_nonexo, 2, function(i) i)
data.frame(apply(comparison_randomintercepts_models_nonexo, 2, function(i) i))
comparison_randomintercepts_models_nonexo <- data.frame(apply(comparison_randomintercepts_models_nonexo, 2, function(i) i))
ggplot((as.data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
head(comparison_randomintercepts_models_nonexo)
comparison_randomintercepts_models_nonexo$value <- as.numeric(comparison_randomintercepts_models_nonexo$value)
ggplot((as.data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
comparison_randomintercepts_models_nonexo$ct2
typeof(comparison_randomintercepts_models_nonexo)
unlist(comparison_randomintercepts_models_nonexo)
comparison_randomintercepts_models_nonexo <- as(comparison_randomintercepts_models_nonexo, 'data.frame')
unlist(comparison_randomintercepts_models_nonexo)
typeof(comparison_randomintercepts_models_nonexo)
typeof(comparison_randomintercepts_models_nonexo$value)
typeof(comparison_randomintercepts_models_nonexo$L1)
typeof(comparison_randomintercepts_models_nonexo$ct)
typeof(comparison_randomintercepts_models_nonexo$ct2)
comparison_randomintercepts_models_nonexo <- do.call(rbind.data.frame, comparison_randomintercepts_models_nonexo)
# comparison_randomintercepts_models_nonexo <- data.frame(apply(comparison_randomintercepts_models_nonexo, 2, function(i) i))
# comparison_randomintercepts_models_nonexo$value <- as.numeric(comparison_randomintercepts_models_nonexo$value)
ggplot((as.data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
comparison_randomintercepts_models_nonexo
comparison_randomintercepts_models_nonexo[[]]
comparison_randomintercepts_models_all <- comparison_randomintercepts_models(model_fullRE_DMSL_list = fullRE_DMSL,
model_diagRE_DMSL_list = diagRE_DMSL,
model_fullRE_M_list = fullRE_M)
comparison_randomintercepts_models_nonexo <- comparison_randomintercepts_models(model_fullRE_DMSL_list = fullRE_DMSL_nonexo,
model_diagRE_DMSL_list = diagRE_DMSL_nonexo,
model_fullRE_M_list = fullRE_M_nonexo)
comparison_randomintercepts_models_nonexo[[1]]
data.frame(comparison_randomintercepts_models_nonexo)
ldply (comparison_randomintercepts_models_nonexo, data.frame)
library (plyr)
ldply (comparison_randomintercepts_models_nonexo, data.frame)
typeof(ldply (comparison_randomintercepts_models_nonexo, data.frame))
comparison_randomintercepts_models_nonexo <- comparison_randomintercepts_models(model_fullRE_DMSL_list = fullRE_DMSL_nonexo,
model_diagRE_DMSL_list = diagRE_DMSL_nonexo,
model_fullRE_M_list = fullRE_M_nonexo)
# comparison_randomintercepts_models_nonexo <- data.frame(apply(comparison_randomintercepts_models_nonexo, 2, function(i) i))
# comparison_randomintercepts_models_nonexo$value <- as.numeric(comparison_randomintercepts_models_nonexo$value)
ggplot((as.data.frame(comparison_randomintercepts_models_nonexo)),
aes(x=(ct2),
y=value))+geom_point()
comparison_randomintercepts_models_nonexo
comparison_randomintercepts_models_rbind
local <- F
if(local){
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
}
set.seed(234)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(MCMCpack)
library(pheatmap)
library(NMF)
library(dendextend)
library(dplyr)
append_name = "ex5"
## two features with several components
## simulate three signatures
f1s1 <- c(0.2, 0.5, 0.2, 0.1, 0.0, 0.0)
f1s2 <- c(0.0, 0.1, 0.4, 0.3, 0.1, 0.1)
f1s3 <- c(0.2, 0.5, 0.2, 0.1, 0.0, 0.0)
f1 <- cbind.data.frame(f1s1, f1s2, f1s3)
f1$id <- 1:length(f1s1)
f2s1 <- c(0.1, 0.4, 0.4, 0.1)
f2s2 <- c(0.1, 0.4, 0.4, 0.1)
f2s3 <- c(0.0, 0.2, 0.8, 0.0)
f2 <- cbind.data.frame(f2s1, f2s2, f2s3)
f2$id <- 1:length(f2s1)
all(colSums(f1[,-ncol(f1)]) == 1) & all(colSums(f2[,-ncol(f2)]) == 1)
nsamples <- 100
## here we do like the reviewer: samples have an exposure of 1 for one signature, and 0 for the rest
exposures_true <- MCMCpack::rdirichlet(n = nsamples, alpha = c(5000.1, 5000.1, 5000.1))
pheatmap::pheatmap(exposures_true)
local <- F
if(local){
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
}
set.seed(234)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(MCMCpack)
library(pheatmap)
library(NMF)
library(dendextend)
append_name = "ex3"
## two features with several components
## simulate three signatures
f1s1 <- c(0.0, 0.0, 0.2, 0.3, 0.4, 0.1, 0.0, 0.0)
f1s2 <- c(0.8, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0)
f1s3 <- c(0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.7, 0.2)
f1 <- cbind.data.frame(f1s1, f1s2, f1s3)
f1$id <- 1:length(f1s1)
f2s1 <- c(0.1, 0.4, 0.4, 0.1)
f2s2 <- c(0.1, 0.4, 0.4, 0.1)
f2s3 <- c(0.1, 0.4, 0.4, 0.1)
f2 <- cbind.data.frame(f2s1, f2s2, f2s3)
f2$id <- 1:length(f2s1)
stopifnot( all(colSums(f1[,-ncol(f1)]) == 1) & all(colSums(f2[,-ncol(f2)]) == 1) )
## create samples by sampling from signatures
## (this omits that from one cn more than one can be created, etc. sort of infinite sites assumption)
nsamples <- 100
## here we do like the reviewer: samples have an exposure of 1 for one signature, and 0 for the rest
exposures_true <- t(sapply(sample(1:3, size = 100, replace = T), function(i){.x <- rep(0, 3); .x[i] <- 1; .x}))
pheatmap::pheatmap(exposures_true)
stopifnot( all(colSums(f1[,-ncol(f1)]) == 1) & all(colSums(f2[,-ncol(f2)]) == 1) )
source("run_simulation_nature_reject.R")
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("run_simulation_nature_reject.R")
f1 <- cbind.data.frame(f1s1, f1s2, f1s3)
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
set.seed(234)
library(ggplot2)
library(reshape2)
library(gridExtra)
library(MCMCpack)
library(pheatmap)
library(NMF)
library(dendextend)
append_name = "ex3"
## two features with several components
## simulate three signatures
f1s1 <- c(0.0, 0.0, 0.2, 0.3, 0.4, 0.1, 0.0, 0.0)
f1s2 <- c(0.8, 0.1, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0)
f1s3 <- c(0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.7, 0.2)
f1 <- cbind.data.frame(f1s1, f1s2, f1s3)
f1$id <- 1:length(f1s1)
f2s1 <- c(0.1, 0.4, 0.4, 0.1)
f2s2 <- c(0.1, 0.4, 0.4, 0.1)
f2s3 <- c(0.1, 0.4, 0.4, 0.1)
f2 <- cbind.data.frame(f2s1, f2s2, f2s3)
f2$id <- 1:length(f2s1)
stopifnot( all(colSums(f1[,-ncol(f1)]) == 1) & all(colSums(f2[,-ncol(f2)]) == 1) )
## create samples by sampling from signatures
## (this omits that from one cn more than one can be created, etc. sort of infinite sites assumption)
nsamples <- 100
## here we do like the reviewer: samples have an exposure of 1 for one signature, and 0 for the rest
exposures_true <- t(sapply(sample(1:3, size = 100, replace = T), function(i){.x <- rep(0, 3); .x[i] <- 1; .x}))
pheatmap::pheatmap(exposures_true)
source("run_simulation_nature_reject.R")
input_mat
## intNMF
colnames(input_mat)
## intNMF
gsub("*_", "", colnames(input_mat))
## intNMF
gsub("*._", "", colnames(input_mat))
## intNMF
gsub("*_.", "", colnames(input_mat))
## intNMF
gsub("*_", "", colnames(input_mat))
## intNMF
gsub("^*_", "", colnames(input_mat))
## intNMF
gsub("^*\\_", "", colnames(input_mat))
## intNMF
gsub("*\\_", "", colnames(input_mat))
## intNMF
gsub("*\_", "", colnames(input_mat))
## intNMF
gsub("\\_", "", colnames(input_mat))
## intNMF
gsub("_*", "", colnames(input_mat))
## intNMF
gsub("_*.", "", colnames(input_mat))
## intNMF
gsub(."_*", "", colnames(input_mat))
## intNMF
gsub("._*", "", colnames(input_mat))
## intNMF
gsub("_*", "", colnames(input_mat))
## intNMF
gsub("\\_*", "", colnames(input_mat))
## intNMF
gsub("\\_.", "", colnames(input_mat))
## intNMF
gsub("*\\_.", "", colnames(input_mat))
## intNMF
gsub("*_:", "", colnames(input_mat))
## intNMF
gsub(".*_", "", colnames(input_mat))
## intNMF
gsub("_.*", "", colnames(input_mat))
## intNMF
unique(gsub("_.*", "", colnames(input_mat)))
## intNMF
lapply(unique(gsub("_.*", "", colnames(input_mat))), function(i) colnames(input_mat)[,grepl(i, colnames(input_mat))
)
## intNMF
lapply(unique(gsub("_.*", "", colnames(input_mat))), function(i) colnames(input_mat)[,grepl(i, colnames(input_mat))])
i=unique(gsub("_.*", "", colnames(input_mat)))[]
i=unique(gsub("_.*", "", colnames(input_mat)))[1]
i
## intNMF
lapply(unique(gsub("_.*", "", colnames(input_mat))), function(i) input_mat[,grepl(i, colnames(input_mat))])
## intNMF
input_intNMF <- lapply(unique(gsub("_.*", "", colnames(input_mat))), function(i) input_mat[,grepl(i, colnames(input_mat))])
sapply(input_intNMF, dim)
sapply(input_intNMF, dim)[2,]
min(sapply(input_intNMF, dim)[2,])
fit_pcawg_norm <- IntNMF::nmf.mnnals(dat=input_intNMF,k=min(sapply(input_intNMF, dim)[2,]) -1,
maxiter=200,st.count=20,n.ini=15,ini.nndsvd=TRUE, seed=TRUE)
min(sapply(input_intNMF, dim)[2,]) -1
input_intNMF
## intNMF
feature_names <- unique(gsub("_.*", "", colnames(input_mat)))
input_intNMF <- lapply(feature_names, function(i) input_mat[,grepl(i, colnames(input_mat))])
names(input_intNMF) <- c(feature_names)
fit_pcawg_norm <- IntNMF::nmf.mnnals(dat=input_intNMF,k=min(sapply(input_intNMF, dim)[2,]) -1,
maxiter=200,st.count=20,n.ini=15,ini.nndsvd=TRUE, seed=TRUE)
input_intNMF
sapply(input_intNMF, dim)
fit_pcawg_norm <- IntNMF::nmf.mnnals(dat=input_intNMF,k=2, #min(sapply(input_intNMF, dim)[2,]) -1,
maxiter=200,st.count=20,n.ini=15,ini.nndsvd=TRUE, seed=TRUE)
fit_pcawg_norm
fit_pcawg_norm <- IntNMF::nmf.mnnals(dat=input_intNMF,k=3, #min(sapply(input_intNMF, dim)[2,]) -1,
maxiter=200,st.count=20,n.ini=15,ini.nndsvd=TRUE, seed=TRUE)
sapply(input_intNMF, dim)
input_intNMF
