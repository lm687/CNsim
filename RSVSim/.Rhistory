length(cn_from_hash)
.x <- cbind.data.frame(position0=as.numeric(names(cn_from_hash)), cn=as.vector(cn_from_hash),
L1=rep(1:length( sapply(genome, length)),  sapply(genome, length)))
dim(.x)
.x$position <- unlist(sapply(sapply(genome, length), function(i) 1:i))
dim(.x)
names_chr <- unique(.x$L1)
names_chr
.x <- lapply(names_chr, function(i){ .x[.x$L1 == i,]; .x <- .x[!(colnames(.x) %in% c("L1", "position0"))]; .x })
length(.x)
dim(.x[[1]])
plot_from_hash_2 <- function(genome_hash_res, ...){
cn_from_hash <- give_cn_from_hash(genome_hash_res)
.x <- cbind.data.frame(position0=as.numeric(names(cn_from_hash)), cn=as.vector(cn_from_hash),
L1=rep(1:length( sapply(genome, length)),  sapply(genome, length)))
.x$position <- unlist(sapply(sapply(genome, length), function(i) 1:i))
names_chr <- unique(.x$L1)
.x <- lapply(names_chr, function(i){
.x[.x$L1 == i,]
.x <- .x[,!(colnames(.x) %in% c("L1", "position0"))]
.x })
names(.x) <- names_chr
.x
}
sapply(plot_from_hash_2(a_read[[4]]), nrow)
cn_from_hash <- give_cn_from_hash(genome_hash_res)
.x <- cbind.data.frame(position0=as.numeric(names(cn_from_hash)), cn=as.vector(cn_from_hash),
L1=rep(1:length( sapply(genome, length)),  sapply(genome, length)))
.x$position <- unlist(sapply(sapply(genome, length), function(i) 1:i))
names_chr <- unique(.x$L1)
.x <- lapply(names_chr, function(i){
.x[.x$L1 == i,]
.x <- .x[,!(colnames(.x) %in% c("L1", "position0"))]
.x })
.x
sapply(.x, dim)
dim(.x$L1)
table(.x$L1)
cn_from_hash <- give_cn_from_hash(genome_hash_res)
.x <- cbind.data.frame(position0=as.numeric(names(cn_from_hash)), cn=as.vector(cn_from_hash),
L1=rep(1:length( sapply(genome, length)),  sapply(genome, length)))
.x$position <- unlist(sapply(sapply(genome, length), function(i) 1:i))
names_chr <- unique(.x$L1)
table(.x$L1)
names_chr
i=names_chr[1]
.x[.x$L1 == i,]
plot_from_hash_2 <- function(genome_hash_res, ...){
cn_from_hash <- give_cn_from_hash(genome_hash_res)
.x <- cbind.data.frame(position0=as.numeric(names(cn_from_hash)), cn=as.vector(cn_from_hash),
L1=rep(1:length( sapply(genome, length)),  sapply(genome, length)))
.x$position <- unlist(sapply(sapply(genome, length), function(i) 1:i))
names_chr <- unique(.x$L1)
.x <- lapply(names_chr, function(i){
.x <- .x[.x$L1 == i,]
.x <- .x[,!(colnames(.x) %in% c("L1", "position0"))]
.x })
names(.x) <- names_chr
.x
}
sapply(.x, dim)
sapply(plot_from_hash_2(a_read[[4]]), nrow)
plot_sim_genome
get_segments(plot_from_hash_2(a_read[[4]]))
plot_sim_genome(plot_from_hash_2(a_read[[4]]))
plot_from_hash_2(a_read[[4]])
plot_from_hash_2
names_chr
names_chr[1:(length(names_chr)/2)]
.x[1:(length(names_chr)/2)]
.x[1:(length(names_chr)/2)]$cn <- .x[1:(length(names_chr)/2)]$cn+.x[(1+(length(names_chr)/2)):length(names_chr)]$cn
.x[1:(length(names_chr)/2)]$cn
.x[1:(length(names_chr)/2)]$cn
.x[(1+(length(names_chr)/2)):length(names_chr)]$cn
.x[(1+(length(names_chr)/2)):length(names_chr)]$cn
.x[(1+(length(names_chr)/2)):length(names_chr)]
.x[(1+(length(names_chr)/2)):length(names_chr),]
.x
.x[(1+(length(names_chr)/2)):length(names_chr),]
.x[1:(nrow(.x)/2)]$cn+.x[(1+(nrow(.x)/2)):nrow(.x)]$cn
.x[1:(nrow(.x)/2),]$cn+.x[(1+(nrow(.x)/2)):nrow(.x),]$cn
cn_from_hash <- give_cn_from_hash(genome_hash_res)
.x <- cbind.data.frame(position0=as.numeric(names(cn_from_hash)), cn=as.vector(cn_from_hash),
L1=rep(1:length( sapply(genome, length)),  sapply(genome, length)))
.x$position <- unlist(sapply(sapply(genome, length), function(i) 1:i))
names_chr <- unique(.x$L1)
.x <- lapply(names_chr, function(i){
.x <- .x[.x$L1 == i,]
.x <- .x[,!(colnames(.x) %in% c("L1", "position0"))]
.x })
names(.x) <- names_chr
.x[1:(nrow(.x)/2)]$cn <- .x[1:(nrow(.x)/2),]$cn+.x[(1+(nrow(.x)/2)):nrow(.x),]$cn
.x[1:(nrow(.x)/2),]$cn <- .x[1:(nrow(.x)/2),]$cn+.x[(1+(nrow(.x)/2)):nrow(.x),]$cn
cn_from_hash <- give_cn_from_hash(genome_hash_res)
.x <- cbind.data.frame(position0=as.numeric(names(cn_from_hash)), cn=as.vector(cn_from_hash),
L1=rep(1:length( sapply(genome, length)),  sapply(genome, length)))
.x$position <- unlist(sapply(sapply(genome, length), function(i) 1:i))
names_chr <- unique(.x$L1)
.x <- lapply(names_chr, function(i){
.x <- .x[.x$L1 == i,]
.x <- .x[,!(colnames(.x) %in% c("L1", "position0"))]
.x })
names(.x) <- names_chr
.x[1:(nrow(.x)/2),]$cn <- .x[1:(nrow(.x)/2),]$cn+.x[(1+(nrow(.x)/2)):nrow(.x),]$cn
.x[1:(nrow(.x)/2),]$cn+.x[(1+(nrow(.x)/2)):nrow(.x),]$cn
.x
cn_from_hash <- give_cn_from_hash(genome_hash_res)
.x <- cbind.data.frame(position0=as.numeric(names(cn_from_hash)), cn=as.vector(cn_from_hash),
L1=rep(1:length( sapply(genome, length)),  sapply(genome, length)))
.x$position <- unlist(sapply(sapply(genome, length), function(i) 1:i))
names_chr <- unique(.x$L1)
.x[1:(nrow(.x)/2),]$cn <- .x[1:(nrow(.x)/2),]$cn+.x[(1+(nrow(.x)/2)):nrow(.x),]$cn
.x <- .x[1:(nrow(.x)/2),]
.x <- lapply(names_chr, function(i){
.x <- .x[.x$L1 == i,]
.x <- .x[,!(colnames(.x) %in% c("L1", "position0"))]
.x })
names(.x) <- names_chr
.x
names_chr
unique(.x$L1)
cn_from_hash <- give_cn_from_hash(genome_hash_res)
.x <- cbind.data.frame(position0=as.numeric(names(cn_from_hash)), cn=as.vector(cn_from_hash),
L1=rep(1:length( sapply(genome, length)),  sapply(genome, length)))
.x$position <- unlist(sapply(sapply(genome, length), function(i) 1:i))
unique(as.character(.x$L1))
cn_from_hash <- give_cn_from_hash(genome_hash_res)
.x <- cbind.data.frame(position0=as.numeric(names(cn_from_hash)), cn=as.vector(cn_from_hash),
L1=rep(1:length( sapply(genome, length)),  sapply(genome, length)))
.x$position <- unlist(sapply(sapply(genome, length), function(i) 1:i))
.x[1:(nrow(.x)/2),]$cn <- .x[1:(nrow(.x)/2),]$cn+.x[(1+(nrow(.x)/2)):nrow(.x),]$cn
.x <- .x[1:(nrow(.x)/2),]
names_chr <- unique(as.character(.x$L1))
.x <- lapply(names_chr, function(i){
.x <- .x[.x$L1 == i,]
.x <- .x[,!(colnames(.x) %in% c("L1", "position0"))]
.x })
names(.x) <- names_chr
.x
plot_from_hash_2 <- function(genome_hash_res, ...){
cn_from_hash <- give_cn_from_hash(genome_hash_res)
.x <- cbind.data.frame(position0=as.numeric(names(cn_from_hash)), cn=as.vector(cn_from_hash),
L1=rep(1:length( sapply(genome, length)),  sapply(genome, length)))
.x$position <- unlist(sapply(sapply(genome, length), function(i) 1:i))
## join homologuos chromosomes
.x[1:(nrow(.x)/2),]$cn <- .x[1:(nrow(.x)/2),]$cn+.x[(1+(nrow(.x)/2)):nrow(.x),]$cn
.x <- .x[1:(nrow(.x)/2),]
names_chr <- unique(as.character(.x$L1))
.x <- lapply(names_chr, function(i){
.x <- .x[.x$L1 == i,]
.x <- .x[,!(colnames(.x) %in% c("L1", "position0"))]
.x })
names(.x) <- names_chr
.x
}
get_segments(plot_from_hash_2(a_read[[4]]))
plot_sim_genome(plot_from_hash_2(a_read[[4]]))
plot_sim_genome(plot_from_hash_2(a_read[[4]]))+facet_wrap(nrow=1)
plot_sim_genome <- function(true_ploidies_sim_df_example2, arg_nrow=1){
true_ploidies_sim_df_example2 <- melt(true_ploidies_sim_df_example2, id.vars=c('cn', 'position'))
ggplot(true_ploidies_sim_df_example2, aes(x=position, xend=position+1, y=cn, yend=cn))+
geom_hline(yintercept = 2, lty='dashed', col='blue')+
geom_step()+facet_wrap(.~L1, scales = "free_x", nrow=arg_nrow)+theme_bw()
}
plot_sim_genome(plot_from_hash_2(a_read[[4]]))+facet_wrap(nrow=1)
plot_sim_genome(plot_from_hash_2(a_read[[4]]))
# plot_from_hash(a_read[j], main=j)
# sapply(a_read[j], plot_from_hash, main=j)
plot_sim_genome(plot_from_hash_2(a_read[[j]]))
j
a_read[[j]]
j
a_read <- lapply(a, readRDS)
exposures[match(gsub(".RDS", "", basename(a)), basename(exposures))]
# a_read <- a_read[match(basename(exposures), gsub(".RDS", "", basename(a)))]
exposures <- exposures[match(gsub(".RDS", "", basename(a)), basename(exposures))]
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("2_helper_functions.R")
library(BSgenome)
library(RSVSim)
library(reshape2)
library(ggplot2)
sigset <- 'sigset1'
a <- list.files("output/output_genome2/outputRSVSim/sigset1/", full.names = T)
exposures <- list.files("exposures/sigset1/", full.names = T)
exposures_read <- sapply(exposures, read.table)
a_read <- lapply(a, readRDS)
# a_read <- a_read[match(basename(exposures), gsub(".RDS", "", basename(a)))]
exposures <- exposures[match(gsub(".RDS", "", basename(a)), basename(exposures))]
exposures_read
a_read[[1]]
first_sig <- sapply(exposures_read, `[`, 1)
first_sig
hist(first_sig)
a_read
name_genome <- "output/genome2/genome2.fa"
genome <- readBStringSet(name_genome, format="fasta",
nrec=-1L, skip=0L, seek.first.rec=FALSE,
use.names=TRUE, with.qualities=FALSE)
genome <- rep(genome, 2)
names(genome) <- paste0(names(genome), rep(c('a', 'b'), each=length(genome)/2))
par(mfrow=c(1,1))
system("mkdir -p output/output_genome2/outputRSVSim/figures/")
pdf(paste0("output/output_genome2/outputRSVSim/figures/", sigset, "_profiles.pdf"))
for(j in 1:length(a_read)){
# plot_from_hash(a_read[j], main=j)
# sapply(a_read[j], plot_from_hash, main=j)
plot_sim_genome(plot_from_hash_2(a_read[[j]]))
}
dev.off()
plot_sim_genome
get_segments(plot_from_hash_2(a_read[[4]]))
plot_sim_genome(plot_from_hash_2(a_read[[4]]))
sapply(plot_from_hash_2(a_read[[4]]), nrow) ## there is something wrong here
sapply(plot_from_hash_2(a_read[[5]]), nrow) ## there is something wrong here
a_read <- lapply(a, readRDS)
# plot_from_hash(a_read[j], main=j)
# sapply(a_read[j], plot_from_hash, main=j)
plot_sim_genome(plot_from_hash_2(a_read[[j]]))
plot_sim_genome(plot_from_hash_2(a_read[[]]))
plot_sim_genome(plot_from_hash_2(a_read[[1]]))
pdf(paste0("output/output_genome2/outputRSVSim/figures/", sigset, "_profiles.pdf"))
for(j in 1:length(a_read)){
# plot_from_hash(a_read[j], main=j)
# sapply(a_read[j], plot_from_hash, main=j)
print(plot_sim_genome(plot_from_hash_2(a_read[[j]])))
}
dev.off()
pdf(paste0("output/output_genome2/outputRSVSim/figures/", sigset, "_profiles.pdf"), height = 3, width = 5)
for(j in 1:length(a_read)){
# plot_from_hash(a_read[j], main=j)
# sapply(a_read[j], plot_from_hash, main=j)
print(plot_sim_genome(plot_from_hash_2(a_read[[j]])))
}
dev.off()
names(a_read)
a
basename(a)
pdf(paste0("output/output_genome2/outputRSVSim/figures/", sigset, "_profiles.pdf"), height = 3, width = 5)
for(j in 1:length(a_read)){
# plot_from_hash(a_read[j], main=j)
# sapply(a_read[j], plot_from_hash, main=j)
print(plot_sim_genome(plot_from_hash_2(a_read[[j]]))+ggtitle(basename(a)[j]))
}
dev.off()
sapply(plot_from_hash_2(a_read[[4]]), nrow) ## there is something wrong here
sapply(plot_from_hash_2(a_read[[5]]), nrow) ## there is something wrong here
a_read
get_segments(a_read[[1]])
get_segments(plot_from_hash_2(a_read[[1]]))
segments <- lapply(a_read, function(i) get_segments(plot_from_hash_2(i)))
## summarise segments and get mixture models
segments
## summarise segments and get mixture models
segment_length <- segments$end - segments$start
segment_length
segments_rbind <- do.call('rbind', segments)
## summarise segments and get mixture models
segment_length <- segments_rbind$end - segments_rbind$start
segment_length
v
segments_rbind
segments_rbind_no2 <- segments_rbind[segments_rbind$cn != 2,]
segment_length <- segments_rbind_no2$end - segments_rbind_no2$start
CN_changepoint <- lapply(unique(segments_rbind$sample), function(sample_it){
do.call('c', sapply(unique(segments_rbind$chrom), function(chrom_it){
.x <- segments_rbind[segments_rbind$sample == sample_it &
segments_rbind$chrom == chrom_it,]
abs(.x[-1,'cn']-.x[-nrow(.x),'cn'])}))
})
CN_changepoint
segments
sapply(segments, nrow)
length(segments)
rep(1:length(segments), sapply(segments, nrow))
segments_rbind$sample <- rep(1:length(segments), sapply(segments, nrow))
CN_changepoint <- lapply(unique(segments_rbind$sample), function(sample_it){
do.call('c', sapply(unique(segments_rbind$chrom), function(chrom_it){
.x <- segments_rbind[segments_rbind$sample == sample_it &
segments_rbind$chrom == chrom_it,]
abs(.x[-1,'cn']-.x[-nrow(.x),'cn'])}))
})
CN_changepoint
plot(density(segment_length))
plot(density(unlist(CN_changepoint)))
par(mfrow=c(1,2))
plot(density(segment_length), main='Segment length')
plot(density(unlist(CN_changepoint)), main='CN changepoint')
segment_length
CN_changepoint_unlist <- unlist(CN_changepoint)
library(flexmix)
flexmix::flexmix(segment_length)
flexmix::clusters(segment_length)
?flexmix
head(segment_length)
head(data.frame(segments=segment_length))
flexmix::flexmix(formula = segment_length~1, data=data.frame(segments=segment_length))
flexmix::flexmix(formula = segment_length~1, data=data.frame(segments=segment_length), k = 2)
source("../../../../other_repos/britroc-cnsignatures-bfb69cd72c50/main_functions.R")
source("../../../../other_repos/britroc-cnsignatures-bfb69cd72c50/helper_functions.R")
segments[[1]]
extractCopynumberFeatures(segments[[1]])
extractCopynumberFeatures(segments)
a
basename(a)
gsub(".RDS", "", basename(a))
names(segments) <- gsub(".RDS", "", basename(a))
extractCopynumberFeatures(segments)
extractCopynumberFeatures
#get chromosome lengths
chrlen<-read.table(paste(this_path,"data/hg19.chrom.sizes.txt",sep="/"),sep="\t",stringsAsFactors = F)[1:24,]
chrlen
#get centromere locations
gaps<-read.table(paste(this_path,"data/gap_hg19.txt",sep="/"),sep="\t",header=F,stringsAsFactors = F)
centromeres<-gaps[gaps[,8]=="centromere",]
require(foreach)
doMC::registerDoMC(cores)
list(segsize = getSegsize(CN_data) )
CN_data <- segments
list(segsize = getSegsize(CN_data) )
list(bp10MB = getBPnum(CN_data,chrlen) )
list(osCN = getOscilation(CN_data,chrlen) )
list(bpchrarm = getCentromereDistCounts(CN_data,centromeres,chrlen) )
list(changepoint = getChangepointCN(CN_data) )
list(copynumber = getCN(CN_data) )
extractCopynumberFeatures_mod<-function(CN_data, cores = 1)
{
## modified from britroc signatures
#get chromosome lengths
chrlen<-read.table(paste(this_path,"data/hg19.chrom.sizes.txt",sep="/"),sep="\t",stringsAsFactors = F)[1:24,]
#get centromere locations
gaps<-read.table(paste(this_path,"data/gap_hg19.txt",sep="/"),sep="\t",header=F,stringsAsFactors = F)
centromeres<-gaps[gaps[,8]=="centromere",]
if(cores > 1) {
require(foreach)
doMC::registerDoMC(cores)
temp_list = foreach::foreach(i=1:4) %dopar% {
if(i == 1){
list(segsize = getSegsize(CN_data) )
# } else if (i == 2) {
# list(bp10MB = getBPnum(CN_data,chrlen) )
} else if (i == 2) {
list(osCN = getOscilation(CN_data,chrlen) )
# } else if (i == 4) {
#   list(bpchrarm = getCentromereDistCounts(CN_data,centromeres,chrlen) )
} else if (i == 3) {
list(changepoint = getChangepointCN(CN_data) )
} else {
list(copynumber = getCN(CN_data) )
}
}
unlist( temp_list, recursive = FALSE )
} else {
segsize<-getSegsize(CN_data)
# bp10MB<-getBPnum(CN_data,chrlen)
osCN<-getOscilation(CN_data,chrlen)
# bpchrarm<-getCentromereDistCounts(CN_data,centromeres,chrlen)
changepoint<-getChangepointCN(CN_data)
copynumber<-getCN(CN_data)
list(segsize=segsize,
# bp10MB=bp10MB,
osCN=osCN,
# bpchrarm=bpchrarm,
changepoint=changepoint,
copynumber=copynumber)
}
}
extractCopynumberFeatures_mod(segments)
features <- extractCopynumberFeatures_mod(segments)
fitMixtureModels_mod<-function(CN_features, seed=77777, min_comp=2, max_comp=10, min_prior=0.001, model_selection="BIC",
nrep=1, niter=1000, cores = 1, featsToFit = seq(1, 6))
{
if(cores > 1) {
require(foreach)
doMC::registerDoMC(cores)
temp_list = foreach(i=1:6) %dopar% {
if(i == 1 & i %in% featsToFit ){
dat<-as.numeric(CN_features[["segsize"]][,2])
list( segsize = fitComponent(dat,seed=seed,model_selection=model_selection,
min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp) )
# } else if (i == 2 & i %in% featsToFit ) {
#
#   dat<-as.numeric(CN_features[["bp10MB"]][,2])
#   list( bp10MB = fitComponent(dat,dist="pois",seed=seed,model_selection=model_selection,
#                               min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp) )
#
} else if (i == 2 & i %in% featsToFit ) {
dat<-as.numeric(CN_features[["osCN"]][,2])
list( osCN = fitComponent(dat,dist="pois",seed=seed,model_selection=model_selection,
min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp) )
# } else if (i == 4 & i %in% featsToFit ) {
#
#   dat<-as.numeric(CN_features[["bpchrarm"]][,2])
#   list( bpchrarm = fitComponent(dat,dist="pois",seed=seed,model_selection=model_selection,
#                                 min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp) )
#
} else if (i == 4 & i %in% featsToFit ) {
dat<-as.numeric(CN_features[["changepoint"]][,2])
list( changepoint = fitComponent(dat,seed=seed,model_selection=model_selection,
min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp) )
} else if (i == 5 & i %in% featsToFit) {
dat<-as.numeric(CN_features[["copynumber"]][,2])
list( copynumber = fitComponent(dat,seed=seed,model_selection=model_selection,
nrep=nrep,min_comp=min_comp,max_comp=max_comp,min_prior=0.005,niter=2000) )
}
}
unlist( temp_list, recursive = FALSE )
} else {
dat<-as.numeric(CN_features[["segsize"]][,2])
segsize_mm<-fitComponent(dat,seed=seed,model_selection=model_selection,
min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp)
# dat<-as.numeric(CN_features[["bp10MB"]][,2])
# bp10MB_mm<-fitComponent(dat,dist="pois",seed=seed,model_selection=model_selection,
#                         min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp)
dat<-as.numeric(CN_features[["osCN"]][,2])
osCN_mm<-fitComponent(dat,dist="pois",seed=seed,model_selection=model_selection,
min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp)
# dat<-as.numeric(CN_features[["bpchrarm"]][,2])
# bpchrarm_mm<-fitComponent(dat,dist="pois",seed=seed,model_selection=model_selection,
#                           min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp)
dat<-as.numeric(CN_features[["changepoint"]][,2])
changepoint_mm<-fitComponent(dat,seed=seed,model_selection=model_selection,
min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp)
dat<-as.numeric(CN_features[["copynumber"]][,2])
copynumber_mm<-fitComponent(dat,seed=seed,model_selection=model_selection,
nrep=nrep,min_comp=min_comp,max_comp=max_comp,min_prior=0.005,niter=2000)
list(segsize=segsize_mm,
# bp10MB=bp10MB_mm,
osCN=osCN_mm,
# bpchrarm=bpchrarm_mm,
changepoint=changepoint_mm,
copynumber=copynumber_mm)
}
}
fitMixtureModels_mod<-function(CN_features, seed=77777, min_comp=2, max_comp=10, min_prior=0.001, model_selection="BIC",
nrep=1, niter=1000, cores = 1, featsToFit = seq(1, 6))
{
if(cores > 1) {
require(foreach)
doMC::registerDoMC(cores)
temp_list = foreach(i=1:6) %dopar% {
if(i == 1 & i %in% featsToFit ){
dat<-as.numeric(CN_features[["segsize"]][,2])
list( segsize = fitComponent(dat,seed=seed,model_selection=model_selection,
min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp) )
# } else if (i == 2 & i %in% featsToFit ) {
#
#   dat<-as.numeric(CN_features[["bp10MB"]][,2])
#   list( bp10MB = fitComponent(dat,dist="pois",seed=seed,model_selection=model_selection,
#                               min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp) )
#
} else if (i == 2 & i %in% featsToFit ) {
dat<-as.numeric(CN_features[["osCN"]][,2])
list( osCN = fitComponent(dat,dist="pois",seed=seed,model_selection=model_selection,
min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp) )
# } else if (i == 4 & i %in% featsToFit ) {
#
#   dat<-as.numeric(CN_features[["bpchrarm"]][,2])
#   list( bpchrarm = fitComponent(dat,dist="pois",seed=seed,model_selection=model_selection,
#                                 min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp) )
#
} else if (i == 4 & i %in% featsToFit ) {
dat<-as.numeric(CN_features[["changepoint"]][,2])
list( changepoint = fitComponent(dat,seed=seed,model_selection=model_selection,
min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp) )
} else if (i == 5 & i %in% featsToFit) {
dat<-as.numeric(CN_features[["copynumber"]][,2])
list( copynumber = fitComponent(dat,seed=seed,model_selection=model_selection,
nrep=nrep,min_comp=min_comp,max_comp=max_comp,min_prior=0.005,niter=2000) )
}
}
unlist( temp_list, recursive = FALSE )
} else {
dat<-as.numeric(CN_features[["segsize"]][,2])
segsize_mm<-fitComponent(dat,seed=seed,model_selection=model_selection,
min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp)
# dat<-as.numeric(CN_features[["bp10MB"]][,2])
# bp10MB_mm<-fitComponent(dat,dist="pois",seed=seed,model_selection=model_selection,
#                         min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp)
dat<-as.numeric(CN_features[["osCN"]][,2])
osCN_mm<-fitComponent(dat,dist="pois",seed=seed,model_selection=model_selection,
min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp)
# dat<-as.numeric(CN_features[["bpchrarm"]][,2])
# bpchrarm_mm<-fitComponent(dat,dist="pois",seed=seed,model_selection=model_selection,
#                           min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp)
dat<-as.numeric(CN_features[["changepoint"]][,2])
changepoint_mm<-fitComponent(dat,seed=seed,model_selection=model_selection,
min_prior=min_prior,niter=niter,nrep=nrep,min_comp=min_comp,max_comp=max_comp)
dat<-as.numeric(CN_features[["copynumber"]][,2])
copynumber_mm<-fitComponent(dat,seed=seed,model_selection=model_selection,
nrep=nrep,min_comp=min_comp,max_comp=max_comp,min_prior=0.005,niter=2000)
list(segsize=segsize_mm,
# bp10MB=bp10MB_mm,
osCN=osCN_mm,
# bpchrarm=bpchrarm_mm,
changepoint=changepoint_mm,
copynumber=copynumber_mm)
}
}
fmm <- fitMixtureModels(features)
fmm
features
head(melt(features))
ggplot(melt(features), aes(x=value))+geom_density()+facet_wrap(.~L1)
dev.off()
dev.off()
ggplot(melt(features), aes(x=value))+geom_density()+facet_wrap(.~L1)
features$osCN
table(features$osCN$value)
table(features$copynumber$value)
table(features$changepoint$value)
