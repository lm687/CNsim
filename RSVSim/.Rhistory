reads_tumour <- replicate(round(nreads*opt$purity),  expr = try(give_reads(sim_to_save,
lengths_chroms,
lengths_chroms_norm)), simplify = T)
reads_tumour <- reads_tumour[sapply(reads_tumour, typeof) == "S4"]
## create complementary reads
reads_tumour
## create complementary reads
sample(1:length(reads_tumour), prob = c(0.5, 0.5))
## create complementary reads
sample(1:length(reads_tumour), size = length(reads_tumour), prob = c(0.5, 0.5))
## create complementary reads
sample(c(0,1), size = length(reads_tumour), prob = c(0.5, 0.5))
## create complementary reads
sample(c(0,1), size = length(reads_tumour), prob = c(0.5, 0.5), replace = T)
## create complementary reads
sample_complementary_tumour <- sample(c(0,1), size = length(reads_tumour), prob = c(0.5, 0.5), replace = T)
sample_complementary_tumour == 0
reads_tumour[sample_complementary_tumour == 0]
complement(reads_tumour[sample_complementary_tumour == 0][1])
reads_tumour[sample_complementary_tumour == 0][1]
complement(reads_tumour[sample_complementary_tumour == 0][[1]])
?complement
sapply(reads_tumour[sample_complementary_tumour == 0], function(i) Biostrings::complement)
reads_tumour[sample_complementary_tumour == 0] = sapply(reads_tumour[sample_complementary_tumour == 0], Biostrings::complement)
reads_tumour
## create reads from the genome too, with a given purity
lengths_chroms_normal <- sapply(genome, nchar)
lengths_chroms_normal_norm <- lengths_chroms_normal/sum(lengths_chroms_normal)
reads_normal <- replicate(round(nreads*(1-opt$purity)),  expr = try(give_reads(DNAStringSet(genome),
lengths_chroms_normal,
lengths_chroms_normal_norm)), simplify = T)
reads_normal <- reads_normal[sapply(reads_normal, typeof) == "S4"]
sample_complementary_normal <- sample(c(0,1), size = length(reads_normal), prob = c(0.5, 0.5), replace = T)
reads_normal[sample_complementar_normal == 0] = sapply(reads_normal[sample_complementary_normal == 0], Biostrings::complement)
reads_normal[sample_complementary_normal == 0] = sapply(reads_normal[sample_complementary_normal == 0], Biostrings::complement)
reads_c <- do.call('c', c(reads_tumour, reads_normal))
names(reads_c) = paste0('read', 1:length(reads_c))
rm(list = ls())
local_bool=T
library(ggplot2)
library(optparse)
library(QDNAseq)
library(CNSimGenome)
library(Biobase)
library(ACE)
source("4_helper_functions.R")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
opt=list()
opt$genome = "genome2"
opt$name = "2dd86725-0b7a-4b8d-a364-3529d113f115"
bins_genome <- readRDS(file = paste0("output/", opt$genome, "/bins_genome02.RDS"))
readCounts <- QDNAseq::binReadCounts(bamfiles = paste0("output/output_",opt$genome, "/alignments/aligned_sim_transloc_reads", opt$name, ".bam"),
bins = bins_genome)
readCounts@assayData$counts ## how many are aligned
sum(readCounts@assayData$counts)
# QDNAseq::QDNAseqCopyNumbers(readCounts)
readCountsFiltered <- readCounts
# readCountsFiltered <- applyFilters(readCounts)
readCountsFiltered@featureData@data$mappability=TRUE ## everything is mappable
readCountsFiltered@featureData@data$use=TRUE ## everything is mappable
readCountsFiltered@featureData@data$gc = rep(1, length(readCountsFiltered@featureData@data$gc))
readCountsFiltered <- estimateCorrection(readCountsFiltered)
copyNumbers <- correctBins(readCountsFiltered)
copyNumbersNormalized <- normalizeBins(copyNumbers)
copyNumbersSmooth <- smoothOutlierBins(copyNumbersNormalized)
copyNumbersSegmented <- segmentBins(copyNumbersSmooth)
# fvarLabels(copyNumbersSegmented)
copyNumbersSegmented@featureData@varMetadata$labelDescription = rownames(copyNumbersSegmented@featureData@varMetadata)
copyNumbersSegmented@featureData@varMetadata = rbind(copyNumbersSegmented@featureData@varMetadata, 'mappability')
copyNumbersSegmented@featureData@varMetadata = rbind(copyNumbersSegmented@featureData@varMetadata, 'use')
rownames(copyNumbersSegmented@featureData@varMetadata)
colnames(readCountsFiltered@featureData@data)
rownames(copyNumbersSegmented@featureData@varMetadata)[nrow(copyNumbersSegmented@featureData@varMetadata)-1] = 'mappability'
rownames(copyNumbersSegmented@featureData@varMetadata)[nrow(copyNumbersSegmented@featureData@varMetadata)] = 'use'
copyNumbersSegmented <- normalizeSegmentedBins(object = copyNumbersSegmented)
rownames(copyNumbersSegmented@featureData@varMetadata)
colnames(readCountsFiltered@featureData@data)
copyNumbersCalled <- callBins(copyNumbersSegmented)
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.8)
readCounts
# # List samples
# qc.data <- read.table(copyNumbersSegmented@input[["meta"]],header = T,sep = "\t")
#
# samples <- qc.data
#
# cn <- assayDataElement(copyNumbersCalled,"copynumber")
# seg <- assayDataElement(copyNumbersCalled,"segmented")
#
# # Convert to abs
# length_bins <- sapply(gsub("*.:", "", rownames(readCounts@assayData$counts)), function(i){.x <- (strsplit(i, '-')[[1]]); as.numeric(.x[2])-as.numeric(.x[1])})
average_depth <- mean(length_bins*readCounts@assayData$counts[,1])
# # List samples
# qc.data <- read.table(copyNumbersSegmented@input[["meta"]],header = T,sep = "\t")
#
# samples <- qc.data
#
# cn <- assayDataElement(copyNumbersCalled,"copynumber")
# seg <- assayDataElement(copyNumbersCalled,"segmented")
#
# # Convert to abs
length_bins <- sapply(gsub("*.:", "", rownames(readCounts@assayData$counts)), function(i){.x <- (strsplit(i, '-')[[1]]); as.numeric(.x[2])-as.numeric(.x[1])})
average_depth <- mean(length_bins*readCounts@assayData$counts[,1])
average_depth
abs_cn <- depthtocn(cn,purity = 1,seqdepth = average_depth)
# # List samples
# qc.data <- read.table(copyNumbersSegmented@input[["meta"]],header = T,sep = "\t")
#
# samples <- qc.data
#
cn <- assayDataElement(copyNumbersCalled,"copynumber")
seg <- assayDataElement(copyNumbersCalled,"segmented")
abs_cn <- depthtocn(cn,purity = 1,seqdepth = average_depth)
abs_seg <- depthtocn(seg,purity = 1,seqdepth = average_depth)
abs_seg
abs_cn <- depthtocn(cn,purity = 0.8,seqdepth = average_depth)
abs_cn
depthtocn
average_depth
abs_cn
abs_seg
average_depth
length_bins
readCounts@assayData$counts[,1]
average_depth <- mean(readCounts@assayData$counts[,1]/length_bins)
average_depth
length_bins*readCounts@assayData$counts[,1]
average_depth <- mean(length_bins/sum(length_bins)*readCounts@assayData$counts[,1])
average_depth
length_bins/sum(length_bins)
length_bins
length_bins/(sum(length_bins))
sum(length_bins/(sum(length_bins)))
average_depth <- sum(length_bins/(sum(length_bins))*readCounts@assayData$counts[,1])
average_depth
abs_cn <- depthtocn(cn,purity = 0.8,seqdepth = average_depth)
abs_seg <- depthtocn(seg,purity = 0.8,seqdepth = average_depth)
abs_cn
abs_seg
paste0("output/", opt$genome)
original_derivative <- readRDS(paste0("output/output_", opt$genome, "/reads", opt$name, ".RDS"))
original_derivative <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, ".RDS"))
original_derivative <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
opt$name = "84eff1f1-f243-4470-9993-98180e80f71e"
original_derivative <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
original_derivative
original_derivative@metadata
original_derivative@metadata$deletions
paste0(original_derivative@metadata$deletions[1:4])
paste0(original_derivative@metadata$deletions[1:4], collapse = "-")
getwd()
fles_genomes <- list.files("output/output_genome2/reads/")
fles_genomes <- fles_genomes[grep('genome.RDS', fles_genomes)]
fles_genomes
genomes
genomes_read <- lapply(fles_genomes, readRDS)
fles_genomes <- list.files("output/output_genome2/reads/", full.names = T)
fles_genomes <- fles_genomes[grep('genome.RDS', fles_genomes)]
genomes_read <- lapply(fles_genomes, readRDS)
genomes_read
sapply(genomes_read, function(i) i@metadata)
sapply(genomes_read, function(i) i@metadata$deletions)
sapply(genomes_read, function(i) i@metadata)
sapply(genomes_read, function(i) i@metadata[1:4])
sapply(genomes_read, function(i) i@metadata$deletions[1:4])
getwd()
fles_genomes <- list.files("output/output_genome2/reads/", full.names = T)
fles_genomes <- fles_genomes[grep('genome.RDS', fles_genomes)]
genomes_read <- lapply(fles_genomes, readRDS)
sapply(genomes_read, function(i) i@metadata$deletions[1:4])
genomes_read
i=genomes_read[[1]]
i@metadata$deletions[1:4]
i@metadata
i=genomes_read[[1]]i@metadata
getwd()
fles_genomes <- list.files("output/output_genome2/reads/", full.names = T)
fles_genomes <- fles_genomes[grep('genome.RDS', fles_genomes)]
genomes_read <- lapply(fles_genomes, readRDS)
sapply(genomes_read, function(i) i@metadata$deletions[1:4])
i=genomes_read[[1]]i@metadata
genomes_read[[1]]
genomes_read[[1]]@metadata
genomes_read[[1]]@ranges
genomes_read[[1]]@metadata
genomes_read[[1]]
sim_to_save
genome
genome <- readBStringSet(name_genome, format="fasta",
nrec=-1L, skip=0L, seek.first.rec=FALSE,
use.names=TRUE, with.qualities=FALSE)
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
opt=list()
opt$name = "dummyname"
opt$genome = "genome2"
opt$purity= 0.8
opt$size_deletion = 200
opt$nreads = 9000
system("touch exposures/dummyname")
cat('Reading exposures - still to be implemented')
exposures <- readLines(paste0("exposures/", opt$name))
if(opt$genome == 'genome'){
name_genome <- "output/genome/genome.fa"
}else if(opt$genome == 'genome2'){
name_genome <- "output/genome2/genome2.fa"
}
genome <- readBStringSet(name_genome, format="fasta",
nrec=-1L, skip=0L, seek.first.rec=FALSE,
use.names=TRUE, with.qualities=FALSE)
if(sum(sapply(names(genome), nchar)) == 0){
names(genome) <- 1:length(genome)
}
## duplicate genome to make it diploid
genome <- rep(genome, 2)
names(genome) <- paste0(names(genome), rep(c('a', 'b'), each=length(genome)/2))
genome
genome
sim_del <- genome
sim_del[1]
sim_del[1][-1:100]
substr(sim_del[1], 1, 10)
substr(sim_del[1], 10, length(sim_del[1]))
substr(sim_del[1], 10, nchar(sim_del[1]))
Biostrings::substr(genome[1], 10, nchar(genome[1]))
genome[1]
sim_del <- genome
sim_del[1] <-   Biostrings::substr(sim_del[1], 10, nchar(sim_del[1]))
sim_del
sim_del <- genome
sim_del[1] <-   Biostrings::substr(sim_del[1], 100, nchar(sim_del[1]))
sim_del[5] <-   Biostrings::substr(sim_del[1], 100, nchar(sim_del[1]))
sim_del
local = T
if(local){
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
opt=list()
opt$name = "dummyname"
opt$genome = "genome2"
opt$purity= 0.8
opt$size_deletion = 200
opt$nreads = 900
system("touch exposures/dummyname")
library(BSgenome)
library(RSVSim)
library(optparse)
}else{
option_list = list(
make_option(c("--name"), type="character", default=NA,
help="name (uuid)", metavar="character"),
make_option(c("--genome"), type="character", default=NA,
help="name of genome to use", metavar="character"),
make_option(c("--purity"), type="double", default=0.8,
help="purity, or fraction [0-1] of reads that come from tumour genome",
metavar="double"),
make_option(c("--size_deletion"), type="double", default=200,
help="size of the deletion, in bp",
metavar="double"),
make_option(c("--nreads"), type="double", default=4200,
help="number of reads",
metavar="double"))
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
}
cat('Reading exposures - still to be implemented')
exposures <- readLines(paste0("exposures/", opt$name))
## ------------------------------------------------------------------------------ ##
if(opt$genome == 'genome'){
name_genome <- "output/genome/genome.fa"
}else if(opt$genome == 'genome2'){
name_genome <- "output/genome2/genome2.fa"
}
genome <- readBStringSet(name_genome, format="fasta",
nrec=-1L, skip=0L, seek.first.rec=FALSE,
use.names=TRUE, with.qualities=FALSE)
if(sum(sapply(names(genome), nchar)) == 0){
names(genome) <- 1:length(genome)
}
## duplicate genome to make it diploid
genome <- rep(genome, 2)
names(genome) <- paste0(names(genome), rep(c('a', 'b'), each=length(genome)/2))
genome
## deletions
# sim_del = simulateSV(output=NA, genome=genome, dels=1, sizeDels=opt$size_deletion,
#                      verbose=FALSE)
sim_del = simulateSV(output=NA, genome=genome, dels=4, sizeDels=opt$size_deletion,
verbose=FALSE)
# for(j in 1:20){
#   .sim_del = simulateSV(output=NA, genome=sim_del, dels=1, sizeDels=opt$size_deletion,
#                        verbose=FALSE)
#   sim_del <- .sim_del
# }
# sim_del@metadata
# rbind(strsplit(as.character(sim_del[1]), '')[[1]], strsplit(as.character(sim_del[5]), '')[[1]],)
# sim_del@metadata
#
# sim_del
# metadata(sim)
#
# ## insertions
sim_insert = simulateSV(output=NA, genome=sim_del, ins=30, sizeIns=50, bpSeqSize=6,
seed=246, verbose=FALSE)
sim_insert <- genome
# sim_insert
# metadata(sim)
#
# ## multiple copies copied
# sim_multiplecopies = simulateSV(output=NA, genome=sim_insert, ins=3, sizeIns=5, percCopiedIns=0.66, bpSeqSize=6, seed=246, verbose=FALSE)
#
# sim_multiplecopies
#
# ## Inversions
# sim_inv = simulateSV(output=NA, genome=sim_multiplecopies, invs=3, sizeInvs=c(2,4,6),
#                      bpSeqSize=6, seed=456, verbose=FALSE)
# sim_inv
#
# ## tandem dups
# sim_tandemdups = simulateSV(output=NA, genome=sim_inv, dups=1, sizeDups=6, maxDups=3,
#                             bpSeqSize=6, seed=3456, verbose=FALSE)
# sim_tandemdups
#
# ## Translocations
# sim_transloc = simulateSV(output=NA, genome=sim_tandemdups,trans=1, bpSeqSize=6, seed=123, verbose=FALSE)
# sim_transloc
#
## create reads and
## write them as fasta
sim_to_save <- DNAStringSet(sim_insert)
## if using genome, it's just to double-check everything is okay when using the sequence without mutations
# sim_to_save <- DNAStringSet(genome)
# sim_to_save <- DNAStringSet(sim_insert)
saveRDS(sim_to_save, paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
sim_to_save
nreads=opt$nreads
length_read = 150
lengths_chroms <- sapply(sim_to_save, nchar)
lengths_chroms_norm <- lengths_chroms/sum(lengths_chroms)
give_reads <- function(arg_genome, arg_lengths_chroms, arg_lengths_chroms_norm){
## sample a chromosome with probability proportional to its size
.chrom_selected <- sample(1:length(arg_lengths_chroms_norm), size = 1, prob = arg_lengths_chroms_norm)
.start <- sample((1-length_read):(arg_lengths_chroms[.chrom_selected]-1), size = 1)
# .start <- sample((1):(arg_lengths_chroms[.chrom_selected]-1-length_read), size = 1)
.read <- getSeq(arg_genome, as(data.frame(chrom=names(arg_genome)[.chrom_selected],
start=max(.start, 1),
end=min(arg_lengths_chroms[.chrom_selected],
.start+(length_read-1))), "GRanges"))
.read
}
reads_tumour <- replicate(round(nreads*opt$purity),  expr = try(give_reads(sim_to_save,
lengths_chroms,
lengths_chroms_norm)), simplify = T)
reads_tumour <- reads_tumour[sapply(reads_tumour, typeof) == "S4"]
## create complementary reads
sample_complementary_tumour <- sample(c(0,1), size = length(reads_tumour), prob = c(0.5, 0.5), replace = T)
reads_tumour[sample_complementary_tumour == 0] = sapply(reads_tumour[sample_complementary_tumour == 0], Biostrings::complement)
## create reads from the genome too, with a given purity
lengths_chroms_normal <- sapply(genome, nchar)
lengths_chroms_normal_norm <- lengths_chroms_normal/sum(lengths_chroms_normal)
reads_normal <- replicate(round(nreads*(1-opt$purity)),  expr = try(give_reads(DNAStringSet(genome),
lengths_chroms_normal,
lengths_chroms_normal_norm)), simplify = T)
reads_normal <- reads_normal[sapply(reads_normal, typeof) == "S4"]
sample_complementary_normal <- sample(c(0,1), size = length(reads_normal), prob = c(0.5, 0.5), replace = T)
reads_normal[sample_complementary_normal == 0] = sapply(reads_normal[sample_complementary_normal == 0], Biostrings::complement)
reads_c <- do.call('c', c(reads_tumour, reads_normal))
names(reads_c) = paste0('read', 1:length(reads_c))
# sim_transloc
system(paste0('mkdir -p output/output_', opt$genome))
system(paste0('mkdir -p output/output_', opt$genome, '/reads/'))
writeXStringSet(x = reads_c, filepath = paste0("output/output_", opt$genome, "/reads/sim_transloc_reads",
opt$name, ".fa"))
# writeXStringSet(x = complement(reads_c), filepath = "output/sim_transloc_reads_complement.fa")
local = T
if(local){
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
opt=list()
opt$name = "dummyname"
opt$genome = "genome2"
opt$purity= 0.8
opt$size_deletion = 200
opt$nreads = 100
system("touch exposures/dummyname")
library(BSgenome)
library(RSVSim)
library(optparse)
}else{
option_list = list(
make_option(c("--name"), type="character", default=NA,
help="name (uuid)", metavar="character"),
make_option(c("--genome"), type="character", default=NA,
help="name of genome to use", metavar="character"),
make_option(c("--purity"), type="double", default=0.8,
help="purity, or fraction [0-1] of reads that come from tumour genome",
metavar="double"),
make_option(c("--size_deletion"), type="double", default=200,
help="size of the deletion, in bp",
metavar="double"),
make_option(c("--nreads"), type="double", default=4200,
help="number of reads",
metavar="double"))
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
}
cat('Reading exposures - still to be implemented')
exposures <- readLines(paste0("exposures/", opt$name))
## ------------------------------------------------------------------------------ ##
if(opt$genome == 'genome'){
name_genome <- "output/genome/genome.fa"
}else if(opt$genome == 'genome2'){
name_genome <- "output/genome2/genome2.fa"
}
genome <- readBStringSet(name_genome, format="fasta",
nrec=-1L, skip=0L, seek.first.rec=FALSE,
use.names=TRUE, with.qualities=FALSE)
if(sum(sapply(names(genome), nchar)) == 0){
names(genome) <- 1:length(genome)
}
## duplicate genome to make it diploid
genome <- rep(genome, 2)
names(genome) <- paste0(names(genome), rep(c('a', 'b'), each=length(genome)/2))
genome
## deletions
# sim_del = simulateSV(output=NA, genome=genome, dels=1, sizeDels=opt$size_deletion,
#                      verbose=FALSE)
sim_del = simulateSV(output=NA, genome=genome, dels=4, sizeDels=opt$size_deletion,
verbose=FALSE)
# for(j in 1:20){
#   .sim_del = simulateSV(output=NA, genome=sim_del, dels=1, sizeDels=opt$size_deletion,
#                        verbose=FALSE)
#   sim_del <- .sim_del
# }
# sim_del@metadata
# rbind(strsplit(as.character(sim_del[1]), '')[[1]], strsplit(as.character(sim_del[5]), '')[[1]],)
# sim_del@metadata
#
# sim_del
# metadata(sim)
#
# ## insertions
sim_insert = simulateSV(output=NA, genome=sim_del, ins=30, sizeIns=50, bpSeqSize=6,
seed=246, verbose=FALSE)
sim_insert <- genome
# sim_insert
# metadata(sim)
#
# ## multiple copies copied
# sim_multiplecopies = simulateSV(output=NA, genome=sim_insert, ins=3, sizeIns=5, percCopiedIns=0.66, bpSeqSize=6, seed=246, verbose=FALSE)
#
# sim_multiplecopies
#
# ## Inversions
# sim_inv = simulateSV(output=NA, genome=sim_multiplecopies, invs=3, sizeInvs=c(2,4,6),
#                      bpSeqSize=6, seed=456, verbose=FALSE)
# sim_inv
#
# ## tandem dups
# sim_tandemdups = simulateSV(output=NA, genome=sim_inv, dups=1, sizeDups=6, maxDups=3,
#                             bpSeqSize=6, seed=3456, verbose=FALSE)
# sim_tandemdups
#
# ## Translocations
# sim_transloc = simulateSV(output=NA, genome=sim_tandemdups,trans=1, bpSeqSize=6, seed=123, verbose=FALSE)
# sim_transloc
#
## create reads and
## write them as fasta
sim_to_save <- DNAStringSet(sim_insert)
## if using genome, it's just to double-check everything is okay when using the sequence without mutations
# sim_to_save <- DNAStringSet(genome)
# sim_to_save <- DNAStringSet(sim_insert)
saveRDS(sim_to_save, paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
sim_to_save
nreads=opt$nreads
length_read = 150
lengths_chroms <- sapply(sim_to_save, nchar)
lengths_chroms_norm <- lengths_chroms/sum(lengths_chroms)
give_reads <- function(arg_genome, arg_lengths_chroms, arg_lengths_chroms_norm){
## sample a chromosome with probability proportional to its size
.chrom_selected <- sample(1:length(arg_lengths_chroms_norm), size = 1, prob = arg_lengths_chroms_norm)
.start <- sample((1-length_read):(arg_lengths_chroms[.chrom_selected]-1), size = 1)
# .start <- sample((1):(arg_lengths_chroms[.chrom_selected]-1-length_read), size = 1)
.read <- getSeq(arg_genome, as(data.frame(chrom=names(arg_genome)[.chrom_selected],
start=max(.start, 1),
end=min(arg_lengths_chroms[.chrom_selected],
.start+(length_read-1))), "GRanges"))
.read
}
reads_tumour <- replicate(round(nreads*opt$purity),  expr = try(give_reads(sim_to_save,
lengths_chroms,
lengths_chroms_norm)), simplify = T)
reads_tumour <- reads_tumour[sapply(reads_tumour, typeof) == "S4"]
## create complementary reads
sample_complementary_tumour <- sample(c(0,1), size = length(reads_tumour), prob = c(0.5, 0.5), replace = T)
reads_tumour[sample_complementary_tumour == 0] = sapply(reads_tumour[sample_complementary_tumour == 0], Biostrings::complement)
## create reads from the genome too, with a given purity
lengths_chroms_normal <- sapply(genome, nchar)
lengths_chroms_normal_norm <- lengths_chroms_normal/sum(lengths_chroms_normal)
reads_normal <- replicate(round(nreads*(1-opt$purity)),  expr = try(give_reads(DNAStringSet(genome),
lengths_chroms_normal,
lengths_chroms_normal_norm)), simplify = T)
reads_normal <- reads_normal[sapply(reads_normal, typeof) == "S4"]
sample_complementary_normal <- sample(c(0,1), size = length(reads_normal), prob = c(0.5, 0.5), replace = T)
reads_normal[sample_complementary_normal == 0] = sapply(reads_normal[sample_complementary_normal == 0], Biostrings::complement)
reads_c <- do.call('c', c(reads_tumour, reads_normal))
names(reads_c) = paste0('read', 1:length(reads_c))
# sim_transloc
system(paste0('mkdir -p output/output_', opt$genome))
system(paste0('mkdir -p output/output_', opt$genome, '/reads/'))
writeXStringSet(x = reads_c, filepath = paste0("output/output_", opt$genome, "/reads/sim_transloc_reads",
opt$name, ".fa"))
# writeXStringSet(x = complement(reads_c), filepath = "output/sim_transloc_reads_complement.fa")
