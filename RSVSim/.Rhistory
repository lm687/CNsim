}
library(ggplot2)
library(optparse)
library(QDNAseq)
# library(CNSimGenome)
library(Biobase)
library(ACE)
source("4_helper_functions.R")
if(local_bool){
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
opt=list()
opt$genome = "genome2"
opt$name = "84eff1f1-f243-4470-9993-98180e80f71e"
opt$name = "1f041abe-1a08-4b39-bab4-168614961fe6"
}else{
option_list = list(
make_option(c("--name"), type="character", default=NA,
help="name (uuid)", metavar="character"),
make_option(c("--genome"), type="character", default=NA,
help="name of genome to use", metavar="character"))
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
}
bins_genome <- readRDS(file = paste0("output/", opt$genome, "/bins_genome02.RDS"))
readCounts <- QDNAseq::binReadCounts(bamfiles = paste0("output/output_",opt$genome, "/alignments/aligned_sim_transloc_reads", opt$name, ".bam"),
bins = bins_genome)
readCounts@assayData$counts ## how many are aligned
sum(readCounts@assayData$counts)
# QDNAseq::QDNAseqCopyNumbers(readCounts)
readCountsFiltered <- readCounts
# readCountsFiltered <- applyFilters(readCounts)
readCountsFiltered@featureData@data$mappability=TRUE ## everything is mappable
readCountsFiltered@featureData@data$use=TRUE ## everything is mappable
readCountsFiltered@featureData@data$gc = rep(1, length(readCountsFiltered@featureData@data$gc))
readCountsFiltered <- estimateCorrection(readCountsFiltered)
copyNumbers <- correctBins(readCountsFiltered)
copyNumbersNormalized <- normalizeBins(copyNumbers)
copyNumbersSmooth <- smoothOutlierBins(copyNumbersNormalized)
copyNumbersSegmented <- segmentBins(copyNumbersSmooth)
# fvarLabels(copyNumbersSegmented)
copyNumbersSegmented@featureData@varMetadata$labelDescription = rownames(copyNumbersSegmented@featureData@varMetadata)
copyNumbersSegmented@featureData@varMetadata = rbind(copyNumbersSegmented@featureData@varMetadata, 'mappability')
copyNumbersSegmented@featureData@varMetadata = rbind(copyNumbersSegmented@featureData@varMetadata, 'use')
rownames(copyNumbersSegmented@featureData@varMetadata)
colnames(readCountsFiltered@featureData@data)
rownames(copyNumbersSegmented@featureData@varMetadata)[nrow(copyNumbersSegmented@featureData@varMetadata)-1] = 'mappability'
rownames(copyNumbersSegmented@featureData@varMetadata)[nrow(copyNumbersSegmented@featureData@varMetadata)] = 'use'
copyNumbersSegmented <- normalizeSegmentedBins(object = copyNumbersSegmented)
rownames(copyNumbersSegmented@featureData@varMetadata)
colnames(readCountsFiltered@featureData@data)
copyNumbersCalled <- callBins(copyNumbersSegmented)
original_derivative <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.8)
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.2)
data_for_plot <- cbind.data.frame(chrom=paste0('chr', gsub(":.*", "", rownames(copyNumbersCalled@assayData$segmented))),
pos=t(sapply(gsub("*.:", "", rownames(copyNumbersCalled@assayData$segmented)), function(i) strsplit(i, '-')[[1]])),
cn=copyNumbersCalled@assayData$segmented[,1])
data_for_plot$pos.1 = as.numeric(data_for_plot$pos.1)
data_for_plot$pos.2 = as.numeric(data_for_plot$pos.2)
ggplot(data_for_plot, aes(x=pos.1, xend=pos.2, y=cn, yend=cn))+geom_segment()+
facet_wrap(.~chrom, scales = "free_x")+theme_bw()
## add information about simulation
details_sim <- readRDS("output/output_genome2/reads/1f041abe-1a08-4b39-bab4-168614961fe6derivative_genome.RDS")
details_sim
details_sim <- readRDS(paste0("output/output_/", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
details_sim <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
## add information about simulation
details_sim <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
details_sim
length(details_sim)
(1:length(details_sim)) %/% (length(details_sim)/2)
(0:(length(details_sim)-1)) %/% (length(details_sim)/2)
(0:(length(details_sim)-1)) %/% (length(details_sim)/2)+1
(0:(length(details_sim)-1)) %% (length(details_sim)/2)+1
i=1
details_sim[c(i, i+(length(details_sim)/2))]
sapply(1:(length(details_sim)/2), function(chrom_idx), details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))])
sapply(1:(length(details_sim)/2), function(chrom_idx) details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))])
sapply(1:(length(details_sim)/2), function(chrom_idx) sapply(details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))], length))
apply(sapply(1:(length(details_sim)/2), function(chrom_idx) sapply(details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))], length)),
2, paste0, collapse=';')
paste0(apply(sapply(1:(length(details_sim)/2), function(chrom_idx) sapply(details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))], length)),
2, paste0, collapse=';'), collapse = " ")
title_plot_lengths_chrom <- paste0(apply(sapply(1:(length(details_sim)/2), function(chrom_idx) sapply(details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))], length)),
2, paste0, collapse=';'), collapse = " ")
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.8,
title = paste0(original_derivative@metadata$deletions[1:4], collapse = "-"))
original_derivative <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
original_derivative
paste0(original_derivative@metadata$deletions[1:4]
collapse = "-")
paste0(original_derivative@metadata$deletions[1:4], collapse = "-")
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.8,
# title = paste0(original_derivative@metadata$deletions[1:4], collapse = "-"),
title=title_plot_lengths_chrom)
local_bool=T
if(local_bool){
rm(list = ls())
local_bool=T
}
library(ggplot2)
library(optparse)
library(QDNAseq)
library(RSVSim)
# library(CNSimGenome)
library(Biobase)
library(ACE)
source("4_helper_functions.R")
if(local_bool){
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
opt=list()
opt$genome = "genome2"
opt$name = "84eff1f1-f243-4470-9993-98180e80f71e"
opt$name = "1f041abe-1a08-4b39-bab4-168614961fe6"
}else{
option_list = list(
make_option(c("--name"), type="character", default=NA,
help="name (uuid)", metavar="character"),
make_option(c("--genome"), type="character", default=NA,
help="name of genome to use", metavar="character"))
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
}
bins_genome <- readRDS(file = paste0("output/", opt$genome, "/bins_genome02.RDS"))
readCounts <- QDNAseq::binReadCounts(bamfiles = paste0("output/output_",opt$genome, "/alignments/aligned_sim_transloc_reads", opt$name, ".bam"),
bins = bins_genome)
readCounts@assayData$counts ## how many are aligned
sum(readCounts@assayData$counts)
# QDNAseq::QDNAseqCopyNumbers(readCounts)
readCountsFiltered <- readCounts
# readCountsFiltered <- applyFilters(readCounts)
readCountsFiltered@featureData@data$mappability=TRUE ## everything is mappable
readCountsFiltered@featureData@data$use=TRUE ## everything is mappable
readCountsFiltered@featureData@data$gc = rep(1, length(readCountsFiltered@featureData@data$gc))
readCountsFiltered <- estimateCorrection(readCountsFiltered)
copyNumbers <- correctBins(readCountsFiltered)
copyNumbersNormalized <- normalizeBins(copyNumbers)
copyNumbersSmooth <- smoothOutlierBins(copyNumbersNormalized)
copyNumbersSegmented <- segmentBins(copyNumbersSmooth)
# fvarLabels(copyNumbersSegmented)
copyNumbersSegmented@featureData@varMetadata$labelDescription = rownames(copyNumbersSegmented@featureData@varMetadata)
copyNumbersSegmented@featureData@varMetadata = rbind(copyNumbersSegmented@featureData@varMetadata, 'mappability')
copyNumbersSegmented@featureData@varMetadata = rbind(copyNumbersSegmented@featureData@varMetadata, 'use')
rownames(copyNumbersSegmented@featureData@varMetadata)
colnames(readCountsFiltered@featureData@data)
rownames(copyNumbersSegmented@featureData@varMetadata)[nrow(copyNumbersSegmented@featureData@varMetadata)-1] = 'mappability'
rownames(copyNumbersSegmented@featureData@varMetadata)[nrow(copyNumbersSegmented@featureData@varMetadata)] = 'use'
copyNumbersSegmented <- normalizeSegmentedBins(object = copyNumbersSegmented)
rownames(copyNumbersSegmented@featureData@varMetadata)
colnames(readCountsFiltered@featureData@data)
copyNumbersCalled <- callBins(copyNumbersSegmented)
original_derivative <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.8)
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.2)
data_for_plot <- cbind.data.frame(chrom=paste0('chr', gsub(":.*", "", rownames(copyNumbersCalled@assayData$segmented))),
pos=t(sapply(gsub("*.:", "", rownames(copyNumbersCalled@assayData$segmented)), function(i) strsplit(i, '-')[[1]])),
cn=copyNumbersCalled@assayData$segmented[,1])
data_for_plot$pos.1 = as.numeric(data_for_plot$pos.1)
data_for_plot$pos.2 = as.numeric(data_for_plot$pos.2)
ggplot(data_for_plot, aes(x=pos.1, xend=pos.2, y=cn, yend=cn))+geom_segment()+
facet_wrap(.~chrom, scales = "free_x")+theme_bw()
## add information about simulation
details_sim <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
title_plot_lengths_chrom <- paste0(apply(sapply(1:(length(details_sim)/2), function(chrom_idx) sapply(details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))], length)),
2, paste0, collapse=';'), collapse = " ")
### From now, I use excerps from Phil's code (see qdnaseq_mod_ds.R)
#bring back to readcount space
copyNumbers_old <- copyNumbers
readCountsFiltered_old <- readCountsFiltered
median(assayDataElement(readCountsFiltered, "fit"), na.rm=T)
assayDataElement(copyNumbers,"copynumber")
## need to go from relative to absolute CN. However, we are already in absolute CN, given that the purity is of 1?
assayDataElement(copyNumbers,"copynumber") <- assayDataElement(copyNumbers,"copynumber") * median(assayDataElement(readCountsFiltered, "fit"), na.rm=T)
copyNumbersSmooth <- mclapply(X=list(copyNumbers), FUN=smoothOutlierBins, mc.cores=1)
copyNumbersSegmented <- mclapply(X=copyNumbersSmooth, FUN=segmentBins, transformFun="sqrt", mc.cores=1)
smoothed_samples <- sampleNames(copyNumbersSegmented)
names(copyNumbersSegmented) <- smoothed_samples
copyNumbersSegmentedSmooth <- smooth_samples(copyNumbersSegmented[[1]])
data_for_plot_abs <- cbind.data.frame(chrom=paste0('chr', gsub(":.*", "", rownames(copyNumbersSegmentedSmooth@assayData$segmented))),
pos=t(sapply(gsub("*:.", "", rownames(copyNumbersSegmentedSmooth@assayData$segmented)), function(i) strsplit(i, '-')[[1]])),
cn=copyNumbersSegmentedSmooth@assayData$segmented[,1])
data_for_plot_abs$pos.1 = as.numeric(data_for_plot$pos.1)
data_for_plot_abs$pos.2 = as.numeric(data_for_plot$pos.2)
# # List samples
# qc.data <- read.table(copyNumbersSegmented@input[["meta"]],header = T,sep = "\t")
#
# samples <- qc.data
#
cn <- assayDataElement(copyNumbersCalled,"copynumber")
seg <- assayDataElement(copyNumbersCalled,"segmented")
#
# # Convert to abs
length_bins <- sapply(gsub("*.:", "", rownames(readCounts@assayData$counts)), function(i){.x <- (strsplit(i, '-')[[1]]); as.numeric(.x[2])-as.numeric(.x[1])})
average_depth <- sum(length_bins/(sum(length_bins))*readCounts@assayData$counts[,1])
abs_cn <- depthtocn(cn,purity = 0.8,seqdepth = average_depth)
abs_seg <- depthtocn(seg,purity = 0.8,seqdepth = average_depth)
title_plot_lengths_chrom
paste0(original_derivative@metadata$deletions[1:4], collapse = "-")
original_derivative
original_derivative <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
original_derivative
RSVSim::compareSV(original_derivative)
paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS")
original_derivative
bins_genome
readCounts
readCounts@assayData$counts
readCounts@assayData$counts[,1]
plot(readCounts@assayData$counts[,1])
QDNAseq::plot(readCounts)
QDNAseq::plot(readCounts)
QDNAseq::isobarPlot(readCounts)
readCounts
?isobarPlot
QDNAseq::isobarPlot(copyNumbersSegmented)
copyNumbersSegmented
QDNAseq::isobarPlot(copyNumbersSegmented$`aligned_sim_transloc_reads1f041abe-1a08-4b39-bab4-168614961fe6`)
QDNAseq::isobarPlot(x = copyNumbersSegmented$`aligned_sim_transloc_reads1f041abe-1a08-4b39-bab4-168614961fe6`)
copyNumbersSegmented$`aligned_sim_transloc_reads1f041abe-1a08-4b39-bab4-168614961fe6`
# QDNAseq::isobarPlot(x = copyNumbersSegmented$`aligned_sim_transloc_reads1f041abe-1a08-4b39-bab4-168614961fe6`)
QDNAseq::frequencyPlot(x = copyNumbersSegmented$`aligned_sim_transloc_reads1f041abe-1a08-4b39-bab4-168614961fe6`)
# QDNAseq::isobarPlot(x = copyNumbersSegmented$`aligned_sim_transloc_reads1f041abe-1a08-4b39-bab4-168614961fe6`)
QDNAseq::noisePlot(x = copyNumbersSegmented$`aligned_sim_transloc_reads1f041abe-1a08-4b39-bab4-168614961fe6`)
?v
?noisePlot
plot(copyNumbersSegmented$`aligned_sim_transloc_reads1f041abe-1a08-4b39-bab4-168614961fe6`)
plot(copyNumbersCalled$`aligned_sim_transloc_reads1f041abe-1a08-4b39-bab4-168614961fe6`)
plot(copyNumbersCalled)
plot(copyNumbersCalled)
details_sim
title_plot_lengths_chrom
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.8,
# title = paste0(original_derivative@metadata$deletions[1:4], collapse = "-"),
title=title_plot_lengths_chrom)
plot(copyNumbersCalled)
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1)
copyNumbersCalled
QDNAseq::plot(readCounts)
plot(copyNumbersSegmented$`aligned_sim_transloc_reads1f041abe-1a08-4b39-bab4-168614961fe6`)
plot(copyNumbersCalled)
plot(copyNumbersSegmented[[1]])
plot(copyNumbersSegmented[[1]])
v
plot(copyNumbersSegmented[[1]])
plot(copyNumbersSegmented)
QDNAseq::plot(readCounts)
details_sim
details_sim
plot(details_sim)
sapply(details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))], length)
sapply(1:(length(details_sim)/2), function(chrom_idx) sapply(details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))], length)))
sapply(1:(length(details_sim)/2), function(chrom_idx) details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))])))
sapply(1:(length(details_sim)/2), function(chrom_idx) details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))]))
sapply(1:(length(details_sim)/2), function(chrom_idx) details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))])
x <- sapply(1:(length(details_sim)/2), function(chrom_idx) details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))])
x[[1]]
apply(x[[1]], 2, sum)
x[[1]] == x[[2]]
x[[1]]
as.character(x[[1]])
strsplit(as.character(x[[1]]), '')[[1]]
strsplit(as.character(x[[1]]), '')[[1]] == strsplit(as.character(x[[2]]), '')[[1]]
as.character(x[[1]])
opt$genome,
opt$genome
opt$name
opt$nreads
opt$size_deletion
title_plot_lengths_chrom
readCounts
readCounts@assayData
readCounts@assayData$counts
readCounts@assayData$counts[,1]
sum(readCounts@assayData$counts[,1])
opt$name
plot(copyNumbersCalled)
title_plot_lengths_chrom
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.8,
# title = paste0(original_derivative@metadata$deletions[1:4], collapse = "-"),
title=title_plot_lengths_chrom)
local_bool=T
if(local_bool){
rm(list = ls())
local_bool=T
}
library(ggplot2)
library(optparse)
library(QDNAseq)
library(RSVSim)
library(Biobase)
library(ACE)
source("4_helper_functions.R")
if(local_bool){
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
opt=list()
opt$genome = "genome2"
opt$name = "84eff1f1-f243-4470-9993-98180e80f71e"
opt$name = "1f041abe-1a08-4b39-bab4-168614961fe6" ### nice pattern
}else{
option_list = list(
make_option(c("--name"), type="character", default=NA,
help="name (uuid)", metavar="character"),
make_option(c("--size_deletion"), type="double", default=200,
help="size of the deletion, in bp",
metavar="double"),
make_option(c("--nreads"), type="double", default=4000,
help="number of reads",
metavar="double"),
make_option(c("--genome"), type="character", default=NA,
help="name of genome to use", metavar="character"))
opt_parser = OptionParser(option_list=option_list);
opt = parse_args(opt_parser);
}
bins_genome <- readRDS(file = paste0("output/", opt$genome, "/bins_genome0002.RDS"))
readCounts <- QDNAseq::binReadCounts(bamfiles = paste0("output/output_",opt$genome, "/alignments/aligned_sim_transloc_reads", opt$name, '_nreads', opt$nreads, '_sizedels', opt$size_deletion, ".bam"),
bins = bins_genome)
readCounts@assayData$counts ## how many are aligned
sum(readCounts@assayData$counts)
bins_genome <- readRDS(file = paste0("output/", opt$genome, "/bins_genome0002.RDS"))
readCounts <- QDNAseq::binReadCounts(bamfiles = paste0("output/output_",opt$genome, "/alignments/aligned_sim_transloc_reads", opt$name, '_nreads', opt$nreads, '_sizedels', opt$size_deletion, ".bam"),
bins = bins_genome)
opt$genome
opt$nreads < 4000
opt$size_deletion <- 1000
bins_genome <- readRDS(file = paste0("output/", opt$genome, "/bins_genome0002.RDS"))
readCounts <- QDNAseq::binReadCounts(bamfiles = paste0("output/output_",opt$genome, "/alignments/aligned_sim_transloc_reads", opt$name, '_nreads', opt$nreads, '_sizedels', opt$size_deletion, ".bam"),
bins = bins_genome)
opt$nreads < 4000
opt$nreads <- 4000
bins_genome <- readRDS(file = paste0("output/", opt$genome, "/bins_genome0002.RDS"))
readCounts <- QDNAseq::binReadCounts(bamfiles = paste0("output/output_",opt$genome, "/alignments/aligned_sim_transloc_reads", opt$name, '_nreads', opt$nreads, '_sizedels', opt$size_deletion, ".bam"),
bins = bins_genome)
opt$nreads <- 8000
opt$size_deletion <- 1
opt$name = "028f3fe8-2a89-4492-bab5-760584a664a5"
bins_genome <- readRDS(file = paste0("output/", opt$genome, "/bins_genome0002.RDS"))
readCounts <- QDNAseq::binReadCounts(bamfiles = paste0("output/output_",opt$genome, "/alignments/aligned_sim_transloc_reads", opt$name, '_nreads', opt$nreads, '_sizedels', opt$size_deletion, ".bam"),
bins = bins_genome)
readCounts@assayData$counts ## how many are aligned
sum(readCounts@assayData$counts)
# QDNAseq::QDNAseqCopyNumbers(readCounts)
readCountsFiltered <- readCounts
# readCountsFiltered <- applyFilters(readCounts)
readCountsFiltered@featureData@data$mappability=TRUE ## everything is mappable
readCountsFiltered@featureData@data$use=TRUE ## everything is mappable
readCountsFiltered@featureData@data$gc = rep(1, length(readCountsFiltered@featureData@data$gc))
readCountsFiltered <- estimateCorrection(readCountsFiltered)
copyNumbers <- correctBins(readCountsFiltered)
copyNumbersNormalized <- normalizeBins(copyNumbers)
copyNumbersSmooth <- smoothOutlierBins(copyNumbersNormalized)
copyNumbersSegmented <- segmentBins(copyNumbersSmooth)
# fvarLabels(copyNumbersSegmented)
copyNumbersSegmented@featureData@varMetadata$labelDescription = rownames(copyNumbersSegmented@featureData@varMetadata)
copyNumbersSegmented@featureData@varMetadata = rbind(copyNumbersSegmented@featureData@varMetadata, 'mappability')
copyNumbersSegmented@featureData@varMetadata = rbind(copyNumbersSegmented@featureData@varMetadata, 'use')
rownames(copyNumbersSegmented@featureData@varMetadata)
colnames(readCountsFiltered@featureData@data)
rownames(copyNumbersSegmented@featureData@varMetadata)[nrow(copyNumbersSegmented@featureData@varMetadata)-1] = 'mappability'
rownames(copyNumbersSegmented@featureData@varMetadata)[nrow(copyNumbersSegmented@featureData@varMetadata)] = 'use'
copyNumbersSegmented <- normalizeSegmentedBins(object = copyNumbersSegmented)
rownames(copyNumbersSegmented@featureData@varMetadata)
colnames(readCountsFiltered@featureData@data)
copyNumbersCalled <- callBins(copyNumbersSegmented)
original_derivative <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
original_derivative_RSV <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome_RSVSim.RDS"))
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.8)
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.2)
original_derivative_RSV
RSVSim::compareSV(original_derivative_RSV)
original_derivative
original_derivative_RSV
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.8)
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.2)
data_for_plot <- cbind.data.frame(chrom=paste0('chr', gsub(":.*", "", rownames(copyNumbersCalled@assayData$segmented))),
pos=t(sapply(gsub("*.:", "", rownames(copyNumbersCalled@assayData$segmented)), function(i) strsplit(i, '-')[[1]])),
cn=copyNumbersCalled@assayData$segmented[,1])
data_for_plot$pos.1 = as.numeric(data_for_plot$pos.1)
data_for_plot$pos.2 = as.numeric(data_for_plot$pos.2)
## add information about simulation
details_sim <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
title_plot_lengths_chrom <- paste0(apply(sapply(1:(length(details_sim)/2), function(chrom_idx) sapply(details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))], length)),
2, paste0, collapse=';'), collapse = " ")
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.8,
# title = paste0(original_derivative@metadata$deletions[1:4], collapse = "-"),
title=title_plot_lengths_chrom)
cat('Plotting coverage\n')
QDNAseq::plot(readCounts)
plot(copyNumbersSegmented)
plot(copyNumbersCalled)
readCounts
readCounts@assayData$counts
readCounts@assayData$counts[,1]
plot(readCounts@assayData$counts[,1])
bins_genome <- readRDS(file = paste0("output/", opt$genome, "/bins_genome02.RDS"))
readCounts@assayData$counts ## how many are aligned
sum(readCounts@assayData$counts)
# QDNAseq::QDNAseqCopyNumbers(readCounts)
readCountsFiltered <- readCounts
# readCountsFiltered <- applyFilters(readCounts)
readCountsFiltered@featureData@data$mappability=TRUE ## everything is mappable
readCountsFiltered@featureData@data$use=TRUE ## everything is mappable
readCountsFiltered@featureData@data$gc = rep(1, length(readCountsFiltered@featureData@data$gc))
readCountsFiltered <- estimateCorrection(readCountsFiltered)
copyNumbers <- correctBins(readCountsFiltered)
copyNumbersNormalized <- normalizeBins(copyNumbers)
copyNumbersSmooth <- smoothOutlierBins(copyNumbersNormalized)
copyNumbersSegmented <- segmentBins(copyNumbersSmooth)
# fvarLabels(copyNumbersSegmented)
copyNumbersSegmented@featureData@varMetadata$labelDescription = rownames(copyNumbersSegmented@featureData@varMetadata)
copyNumbersSegmented@featureData@varMetadata = rbind(copyNumbersSegmented@featureData@varMetadata, 'mappability')
copyNumbersSegmented@featureData@varMetadata = rbind(copyNumbersSegmented@featureData@varMetadata, 'use')
rownames(copyNumbersSegmented@featureData@varMetadata)
colnames(readCountsFiltered@featureData@data)
rownames(copyNumbersSegmented@featureData@varMetadata)[nrow(copyNumbersSegmented@featureData@varMetadata)-1] = 'mappability'
rownames(copyNumbersSegmented@featureData@varMetadata)[nrow(copyNumbersSegmented@featureData@varMetadata)] = 'use'
copyNumbersSegmented <- normalizeSegmentedBins(object = copyNumbersSegmented)
rownames(copyNumbersSegmented@featureData@varMetadata)
colnames(readCountsFiltered@featureData@data)
copyNumbersCalled <- callBins(copyNumbersSegmented)
original_derivative <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
original_derivative_RSV <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome_RSVSim.RDS"))
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.8)
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.2)
data_for_plot <- cbind.data.frame(chrom=paste0('chr', gsub(":.*", "", rownames(copyNumbersCalled@assayData$segmented))),
pos=t(sapply(gsub("*.:", "", rownames(copyNumbersCalled@assayData$segmented)), function(i) strsplit(i, '-')[[1]])),
cn=copyNumbersCalled@assayData$segmented[,1])
data_for_plot$pos.1 = as.numeric(data_for_plot$pos.1)
data_for_plot$pos.2 = as.numeric(data_for_plot$pos.2)
## add information about simulation
details_sim <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
title_plot_lengths_chrom <- paste0(apply(sapply(1:(length(details_sim)/2), function(chrom_idx) sapply(details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))], length)),
2, paste0, collapse=';'), collapse = " ")
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.8,
# title = paste0(original_derivative@metadata$deletions[1:4], collapse = "-"),
title=title_plot_lengths_chrom)
QDNAseq::plot(readCounts)
plot(copyNumbersSegmented)
plot(copyNumbersCalled)
### From now, I use excerps from Phil's code (see qdnaseq_mod_ds.R)
#bring back to readcount space
copyNumbers_old <- copyNumbers
readCountsFiltered_old <- readCountsFiltered
median(assayDataElement(readCountsFiltered, "fit"), na.rm=T)
assayDataElement(copyNumbers,"copynumber")
## need to go from relative to absolute CN. However, we are already in absolute CN, given that the purity is of 1?
assayDataElement(copyNumbers,"copynumber") <- assayDataElement(copyNumbers,"copynumber") * median(assayDataElement(readCountsFiltered, "fit"), na.rm=T)
bins_genome
bins_genome <- readRDS(file = paste0("output/", opt$genome, "/bins_genome02.RDS"))
readCounts <- QDNAseq::binReadCounts(bamfiles = paste0("output/output_",opt$genome, "/alignments/aligned_sim_transloc_reads", opt$name, '_nreads', opt$nreads, '_sizedels', opt$size_deletion, ".bam"),
bins = bins_genome)
readCounts@assayData$counts ## how many are aligned
sum(readCounts@assayData$counts)
# QDNAseq::QDNAseqCopyNumbers(readCounts)
readCountsFiltered <- readCounts
# readCountsFiltered <- applyFilters(readCounts)
readCountsFiltered@featureData@data$mappability=TRUE ## everything is mappable
readCountsFiltered@featureData@data$use=TRUE ## everything is mappable
readCountsFiltered@featureData@data$gc = rep(1, length(readCountsFiltered@featureData@data$gc))
readCountsFiltered <- estimateCorrection(readCountsFiltered)
copyNumbers <- correctBins(readCountsFiltered)
copyNumbersNormalized <- normalizeBins(copyNumbers)
copyNumbersSmooth <- smoothOutlierBins(copyNumbersNormalized)
copyNumbersSegmented <- segmentBins(copyNumbersSmooth)
# fvarLabels(copyNumbersSegmented)
copyNumbersSegmented@featureData@varMetadata$labelDescription = rownames(copyNumbersSegmented@featureData@varMetadata)
copyNumbersSegmented@featureData@varMetadata = rbind(copyNumbersSegmented@featureData@varMetadata, 'mappability')
copyNumbersSegmented@featureData@varMetadata = rbind(copyNumbersSegmented@featureData@varMetadata, 'use')
rownames(copyNumbersSegmented@featureData@varMetadata)
colnames(readCountsFiltered@featureData@data)
rownames(copyNumbersSegmented@featureData@varMetadata)[nrow(copyNumbersSegmented@featureData@varMetadata)-1] = 'mappability'
rownames(copyNumbersSegmented@featureData@varMetadata)[nrow(copyNumbersSegmented@featureData@varMetadata)] = 'use'
copyNumbersSegmented <- normalizeSegmentedBins(object = copyNumbersSegmented)
rownames(copyNumbersSegmented@featureData@varMetadata)
colnames(readCountsFiltered@featureData@data)
copyNumbersCalled <- callBins(copyNumbersSegmented)
original_derivative <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
original_derivative_RSV <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome_RSVSim.RDS"))
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.8)
ACE::singleplot(template = copyNumbersCalled, QDNAseqobjectsample = 1, cellularity = 0.2)
data_for_plot <- cbind.data.frame(chrom=paste0('chr', gsub(":.*", "", rownames(copyNumbersCalled@assayData$segmented))),
pos=t(sapply(gsub("*.:", "", rownames(copyNumbersCalled@assayData$segmented)), function(i) strsplit(i, '-')[[1]])),
cn=copyNumbersCalled@assayData$segmented[,1])
data_for_plot$pos.1 = as.numeric(data_for_plot$pos.1)
data_for_plot$pos.2 = as.numeric(data_for_plot$pos.2)
## add information about simulation
details_sim <- readRDS(paste0("output/output_", opt$genome, "/reads/", opt$name, "derivative_genome.RDS"))
title_plot_lengths_chrom <- paste0(apply(sapply(1:(length(details_sim)/2), function(chrom_idx) sapply(details_sim[c(chrom_idx, chrom_idx+(length(details_sim)/2))], length)),
2, paste0, collapse=';'), collapse = " ")
library(CNSimGenome2)
binSize <- 0.02 ##A numeric scalar specifying the width of the bins in units of kbp (1000 base pairs), e.g. binSize=15 corresponds to 15 kbp bins.
bins_genome02 <- QDNAseq::createBins(CNSimGenome2, 0.02, ignoreMitochondria=TRUE, excludeSeqnames=NULL,
verbose=getOption("QDNAseq::verbose", TRUE))
saveRDS(bins_genome02, "output/genome2/bins_genome002.RDS")
length(bins_genome02)
bins_genome02
dim(bins_genome02)
bins_genome02 <- QDNAseq::createBins(CNSimGenome2, 0.2, ignoreMitochondria=TRUE, excludeSeqnames=NULL,
verbose=getOption("QDNAseq::verbose", TRUE))
dim(bins_genome02)
bins_genome02 <- QDNAseq::createBins(CNSimGenome2, 0.002, ignoreMitochondria=TRUE, excludeSeqnames=NULL,
verbose=getOption("QDNAseq::verbose", TRUE))
dim(bins_genome02)
many_changes
many_changes <- simulateSV(dels = 10, ins = 20, genome = genome, output = NA)
genome <- readBStringSet(name_genome, format="fasta",
nrec=-1L, skip=0L, seek.first.rec=FALSE,
use.names=TRUE, with.qualities=FALSE)
if(sum(sapply(names(genome), nchar)) == 0){
names(genome) <- 1:length(genome)
}
## duplicate genome to make it diploid
genome <- rep(genome, 2)
